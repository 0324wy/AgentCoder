[
    {
        "task_id": "HumanEval/0",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "canonical_solution": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "entry_point": "has_close_elements",
        "completion_list": [
            "\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
            "\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
            "\nfrom typing import List\n\n\ndef exponentiate_numbers(numbers: List[int], power: int) -> List[int]:\n    \"\"\" This function takes a list of numbers and an exponent as input. Your task is to calculate\n    the result of raising each number to the given exponent and return the list of results.\n    >>> exponentiate_numbers([1, 2, 3, 4], 3)\n    [1, 8, 27, 64]\n    >>> exponentiate_numbers([2, 4, 6, 8], 2)\n    [4, 16, 36, 64]\n    \"\"\"\n\n",
            "\n1. Define a function called has_close_elements(numbers: List[float], threshold: float) -> bool\n2. Iterate through the numbers list using a nested loop\n3. For each element \"elem\" in the list:\n    - Iterate through the list again to compare \"elem\" with every other element \"elem2\" in the list\n        - If the index of \"elem\" is not equal to the index of \"elem2\":\n            - Calculate the absolute difference between \"elem\" and \"elem2\"\n            - If the difference is less than the threshold:\n                - Return True\n4. If no such pair is found, return False\n",
            "\n1. Initialize a nested loop to iterate through each pair of elements in the list.\n2. Calculate the absolute difference between the pair of elements.\n3. If the difference is less than the threshold, return True.\n4. If no pair satisfies the condition, return False.\n"
        ]
    },
    {
        "task_id": "HumanEval/1",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "entry_point": "separate_paren_groups",
        "completion_list": [
            "\nseparate_paren_groups(paren_string):\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c is '(' then:\n            current_depth += 1\n            append c to current_string\n        else if c is ')' then:\n            current_depth -= 1\n            append c to current_string\n            if current_depth is 0 then:\n                add current_string joined to string to result\n                clear current_string\n\n    return result\n",
            "\ndef fibonacci_sequence(num_terms: int) -> List[int]:\n    sequence = []\n    a, b = 0, 1\n    for _ in range(num_terms):\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence\n\n# Test the function\nprint(fibonacci_sequence(10))  # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n",
            "\n1. Initialize an empty list called result to store separate paren groups.\n2. Initialize an empty string called current_string to store the current group.\n3. Initialize a variable called current_depth and set it to 0.\n4. Iterate through each character c in the input string:\n    a. If c is '(', increment current_depth by 1 and append c to current_string.\n    b. If c is ')', decrement current_depth by 1 and append c to current_string.\n    c. If current_depth becomes 0, append the current_string to the result list and clear current_string.\n5. Return result.\n",
            "\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Step 1\n    result = []  # Step 2\n    current_string = []  # Step 3\n    current_depth = 0  # Step 4\n\n    for c in paren_string:  # Step 5\n        if c == '(':  # Step 6\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':  # Step 7\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:  # Check if current group is complete\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result  # Step 8\n",
            "To get started, could you please provide me with the details of the function for which you need assistance with the code? Thank you!"
        ]
    },
    {
        "task_id": "HumanEval/2",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "entry_point": "truncate_number",
        "completion_list": [
            "\n1. Declare a function with a parameter 'number'.\n2. Convert 'number' to an integer and store it in a variable 'integer_part'.\n3. Calculate the 'decimal_part' by subtracting 'integer_part' from 'number'.\n4. Return the 'decimal_part'.\n",
            "\n1. Convert the number to a string\n2. Find the index of the decimal point\n3. Extract the substring after the decimal point\n4. Convert the extracted substring to a floating point number\n5. Return the floating point number as the result\n",
            "\ndef truncate_number(number: float) -> float:\n    integer_part = int(number)\n    return number - integer_part\n",
            "\ndef truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n",
            "\ndef truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"
        ]
    },
    {
        "task_id": "HumanEval/3",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "entry_point": "below_zero",
        "completion_list": [
            "\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    # Initialize balance\n    balance = 0\n\n    # Iterate through operations\n    for op in operations:\n        # Update balance\n        balance += op\n        # Check if balance falls below zero\n        if balance < 0:\n            return True\n\n    # Return False if balance never falls below zero\n    return False\n",
            "\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
            "\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"
        ]
    },
    {
        "task_id": "HumanEval/4",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "entry_point": "mean_absolute_deviation",
        "completion_list": [
            "\n1. Calculate the mean of the input list of numbers.\n    - Calculate the sum of the numbers in the list.\n    - Divide the sum by the total number of elements in the list.\n2. Create an empty list to store the absolute differences.\n3. Iterate through the list of numbers:\n    - Calculate the absolute difference between each number and the mean.\n    - Add this absolute difference to the list created in step 2.\n4. Calculate the average of the absolute differences.\n5. Return the average as the mean absolute deviation.\n",
            "\n1. Calculate the mean of the input list\n    - Let n be the length of the list\n    - Initialize total_sum to 0\n    - For each number in the list:\n        - Add the number to total_sum\n    - Calculate the mean as total_sum / n\n\n2. Calculate the absolute difference for each element\n    - Initialize abs_diff_sum to 0\n    - For each number in the list:\n        - Calculate the absolute difference between the number and the mean\n        - Add the absolute difference to abs_diff_sum\n\n3. Calculate the Mean Absolute Deviation\n    - Calculate the MAD as abs_diff_sum / n\n    - Return the MAD\n",
            "\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)  # Calculate the mean of the numbers\n    absolute_diff_sum = 0\n    for num in numbers:\n        absolute_diff_sum += abs(num - mean)  # Calculate the sum of absolute differences\n    mad = absolute_diff_sum / len(numbers)  # Calculate the MAD\n    return mad\n",
            "\n1. Calculate the mean of the given list of numbers.\n   mean = sum(numbers) / len(numbers)\n\n2. Calculate the absolute deviation of each number from the mean.\n   deviations = [abs(x - mean) for x in numbers]\n\n3. Compute the average of these absolute deviations.\n   MAD = sum(deviations) / len(deviations)\n\n4. Return the mean absolute deviation.\n",
            "\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    absolute_diff = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_diff) / len(absolute_diff)\n    return mad\n"
        ]
    }
]