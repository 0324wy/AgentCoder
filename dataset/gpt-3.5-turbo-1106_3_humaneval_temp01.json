[
    {
        "task_id": "HumanEval/0",
        "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "canonical_solution": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n",
        "entry_point": "has_close_elements",
        "completion_list": [
            "\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False\n"
        ],
        "test_case_list": [
            "\nassert has_close_elements([1.0, 2.0, 3.0], 0.5) == False, \"No numbers are closer than the threshold\"\nassert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True, \"Numbers 2.8 and 3.0 are closer than the threshold\"\n"
        ],
        "full_code": "import math\nimport re\nimport sys\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\n\n\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(has_close_elements):\n    assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True\n\ncheck(has_close_elements)",
        "completion": "\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False\n",
        "need_reproduce": false,
        "idx": 0,
        "max_correct": 1,
        "result": "passed"
    },
    {
        "task_id": "HumanEval/1",
        "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "entry_point": "separate_paren_groups",
        "completion_list": [
            "\nfrom typing import List\n\ndef separate_paren_groups(s: str) -> List[str]:\n    stack = []\n    result = []\n    start = 0\n    for i, char in enumerate(s):\n        if char == '(':\n            stack.append(i)\n        elif char == ')' and stack:\n            start = stack.pop()\n            if not stack:\n                result.append(s[start:i+1])\n        else:\n            stack = []\n    return result\n\n# Test case\nassert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())'], \"Test Case Description\"\n"
        ],
        "test_case_list": [
            "\nassert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())'], \"Test Case Description\"\n"
        ],
        "completion": "\nfrom typing import List\n\ndef separate_paren_groups(s: str) -> List[str]:\n    stack = []\n    result = []\n    start = 0\n    for i, char in enumerate(s):\n        if char == '(':\n            stack.append(i)\n        elif char == ')' and stack:\n            start = stack.pop()\n            if not stack:\n                result.append(s[start:i+1])\n        else:\n            stack = []\n    return result\n\n# Test case\nassert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())'], \"Test Case Description\"\n",
        "result": "failed: AssertionError:Test Case Description",
        "full_code": "import math\nimport re\nimport sys\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\n\n\nfrom typing import List\n\ndef separate_paren_groups(s: str) -> List[str]:\n    stack = []\n    result = []\n    start = 0\n    for i, char in enumerate(s):\n        if char == '(':\n            stack.append(i)\n        elif char == ')' and stack:\n            start = stack.pop()\n            if not stack:\n                result.append(s[start:i+1])\n        else:\n            stack = []\n    return result\n\n# Test case\nassert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())'], \"Test Case Description\"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(separate_paren_groups):\n    assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n\ncheck(separate_paren_groups)"
    },
    {
        "task_id": "HumanEval/2",
        "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "canonical_solution": "    return number % 1.0\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n",
        "entry_point": "truncate_number",
        "completion_list": [
            "\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"
        ],
        "test_case_list": [
            "\nassert truncate_number(3.5) == 0.5, \"Should return the decimal part of the number\"\nassert truncate_number(7.0) == 0.0, \"Should return 0 for whole numbers\"\nassert truncate_number(9.876) == 0.876, \"Should return the decimal part of the number\"\nassert truncate_number(0.123) == 0.123, \"Should return the same number for decimals less than 1\"\n"
        ],
        "full_code": "import math\nimport re\nimport sys\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\n\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(truncate_number):\n    assert abs(truncate_number(3.5) - 0.5) < 1e-6\n    assert abs(truncate_number(7.0) - 0.0) < 1e-6\n    assert abs(truncate_number(9.876) - 0.876) < 1e-6\n    assert abs(truncate_number(0.123) - 0.123) < 1e-6\n\ncheck(truncate_number)",
        "completion": "\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n",
        "need_reproduce": false,
        "idx": 0,
        "max_correct": 1,
        "result": "passed"
    },
    {
        "task_id": "HumanEval/3",
        "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n",
        "entry_point": "below_zero",
        "completion_list": [
            "\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\nassert below_zero([1, 2, 3]) == False, \"All operations result in positive balance\"\nassert below_zero([1, 2, -4, 5]) == True, \"Balance falls below zero after the third operation\"\nassert below_zero([10, -10, 5, 3, -20]) == True, \"Balance falls below zero after the fourth operation\"\nassert below_zero([100, 200, -300, 400, 500]) == True, \"Balance falls below zero after the third operation\"\nassert below_zero([1000, 2000, 3000, 4000, 5000]) == False, \"All operations result in positive balance\"\n"
        ],
        "test_case_list": [
            "\nassert below_zero([1, 2, 3]) == False, \"All operations result in positive balance\"\nassert below_zero([1, 2, -4, 5]) == True, \"Balance falls below zero after the third operation\"\nassert below_zero([10, -10, 5, 3, -20]) == True, \"Balance falls below zero after the fourth operation\"\nassert below_zero([100, 200, -300, 400, 500]) == True, \"Balance falls below zero after the third operation\"\nassert below_zero([1000, 2000, 3000, 4000, 5000]) == False, \"All operations result in positive balance\"\n"
        ],
        "full_code": "import math\nimport re\nimport sys\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\n\n\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\nassert below_zero([1, 2, 3]) == False, \"All operations result in positive balance\"\nassert below_zero([1, 2, -4, 5]) == True, \"Balance falls below zero after the third operation\"\nassert below_zero([10, -10, 5, 3, -20]) == True, \"Balance falls below zero after the fourth operation\"\nassert below_zero([100, 200, -300, 400, 500]) == True, \"Balance falls below zero after the third operation\"\nassert below_zero([1000, 2000, 3000, 4000, 5000]) == False, \"All operations result in positive balance\"\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(below_zero):\n    assert below_zero([1, 2, 3]) == False\n    assert below_zero([1, 2, -4, 5]) == True\n    assert below_zero([10, -10, 5, 3, -20]) == True\n    assert below_zero([100, 200, -300, 400, 500]) == True\n    assert below_zero([1000, 2000, 3000, 4000, 5000]) == False\n\ncheck(below_zero)",
        "completion": "\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\nassert below_zero([1, 2, 3]) == False, \"All operations result in positive balance\"\nassert below_zero([1, 2, -4, 5]) == True, \"Balance falls below zero after the third operation\"\nassert below_zero([10, -10, 5, 3, -20]) == True, \"Balance falls below zero after the fourth operation\"\nassert below_zero([100, 200, -300, 400, 500]) == True, \"Balance falls below zero after the third operation\"\nassert below_zero([1000, 2000, 3000, 4000, 5000]) == False, \"All operations result in positive balance\"\n",
        "result": "failed: AssertionError:Balance falls below zero after the third operation"
    },
    {
        "task_id": "HumanEval/4",
        "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n",
        "entry_point": "mean_absolute_deviation",
        "completion_list": [
            "\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the input numbers.\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences between each number and the mean.\n    absolute_diff = [abs(num - mean) for num in numbers]\n    \n    # Calculate the average of these absolute differences.\n    mean_absolute_dev = sum(absolute_diff) / len(absolute_diff)  # Use len(absolute_diff) instead of len(numbers)\n    \n    # Return the mean absolute deviation.\n    return mean_absolute_dev\n"
        ],
        "test_case_list": [
            "\nassert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0, \"Test Case 1\"\nassert mean_absolute_deviation([5.0, 5.0, 5.0, 5.0]) == 0.0, \"Test Case 2\"\nassert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.0, \"Test Case 3\"\nassert mean_absolute_deviation([10.0, 20.0, 30.0, 40.0, 50.0]) == 20.0, \"Test Case 4\"\n"
        ],
        "completion": "\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the input numbers.\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences between each number and the mean.\n    absolute_diff = [abs(num - mean) for num in numbers]\n    \n    # Calculate the average of these absolute differences.\n    mean_absolute_dev = sum(absolute_diff) / len(absolute_diff)  # Use len(absolute_diff) instead of len(numbers)\n    \n    # Return the mean absolute deviation.\n    return mean_absolute_dev\n",
        "result": "failed: AssertionError:",
        "full_code": "import math\nimport re\nimport sys\nimport copy\nimport datetime\nimport itertools\nimport collections\nimport heapq\nimport statistics\nimport functools\nimport hashlib\nimport numpy\nimport numpy as np\nimport string\nfrom typing import *\nfrom collections import *\n\n\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the input numbers.\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences between each number and the mean.\n    absolute_diff = [abs(num - mean) for num in numbers]\n    \n    # Calculate the average of these absolute differences.\n    mean_absolute_dev = sum(absolute_diff) / len(absolute_diff)  # Use len(absolute_diff) instead of len(numbers)\n    \n    # Return the mean absolute deviation.\n    return mean_absolute_dev\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\ndef check(mean_absolute_deviation):\n    assert abs(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(mean_absolute_deviation([5.0, 5.0, 5.0, 5.0]) - 0.0) < 1e-6\n    assert abs(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 1.0) < 1e-6\n    assert abs(mean_absolute_deviation([10.0, 20.0, 30.0, 40.0, 50.0]) - 20.0) < 1e-6\n\ncheck(mean_absolute_deviation)"
    }
]