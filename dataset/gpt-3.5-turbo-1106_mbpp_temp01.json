[
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
        "code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
        "test_imports": [],
        "test_list": [
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
            "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ],
        "completion": "\ndef remove_Occ(string, char):\n    # Write your code here\n    pass\n\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result",
        "test_imports": [],
        "test_list": [
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ],
        "completion": "\ndef sort_matrix(matrix):\n    sorted_matrix = sorted(matrix, key=lambda x: sum(x))\n    return sorted_matrix\n\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.",
        "code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ",
        "test_imports": [],
        "test_list": [
            "assert find_Volume(10,8,6) == 240",
            "assert find_Volume(3,2,2) == 6",
            "assert find_Volume(1,2,1) == 1"
        ],
        "completion": "\ndef find_Volume(base, height, length):\n    return 0.5 * base * height * length\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 16,
        "prompt": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "code": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "test_imports": [],
        "test_list": [
            "assert text_lowercase_underscore(\"aab_cbbbc\")==(True)",
            "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)",
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"
        ],
        "completion": "\n# Few-shot prompt\ndef text_lowercase_underscore(s):\n    import re\n    return bool(re.match(r'^[a-z]+(_[a-z]+)+$', s))\n\n# Tests\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\nassert text_lowercase_underscore(\"aab_Abbbc\")==(False)\nassert text_lowercase_underscore(\"Aaab_abbbc\")==(False)\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 17,
        "prompt": "Write a function that returns the perimeter of a square given its side length as input.",
        "code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter",
        "test_imports": [],
        "test_list": [
            "assert square_perimeter(10)==40",
            "assert square_perimeter(5)==20",
            "assert square_perimeter(4)==16"
        ],
        "completion": "\ndef square_perimeter(side_length):\n    return 4 * side_length\n\nassert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ",
        "test_imports": [],
        "test_list": [
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"
        ],
        "completion": "\ndef remove_dirty_chars(string1, string2):\n    return ''.join([char for char in string1 if char not in string2])\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ",
        "test_imports": [],
        "test_list": [
            "assert test_duplicate(([1,2,3,4,5]))==False",
            "assert test_duplicate(([1,2,3,4, 4]))==True",
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
        ],
        "completion": "\n# Find whether a given array of integers contains any duplicate element\ndef test_duplicate(arr):\n    # Write your code here\n    pass\n\n# Test cases\nassert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 20,
        "prompt": "Write a function to check if the given number is woodball or not.",
        "code": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False",
        "test_imports": [],
        "test_list": [
            "assert is_woodall(383) == True",
            "assert is_woodall(254) == False",
            "assert is_woodall(200) == False"
        ],
        "completion": "\ndef is_woodall(n):\n    result = 1\n    i = 1\n    while result < n:\n        result = i * (2 ** i - 1)\n        if result == n:\n            return True\n        i += 1\n    return False\n\n# Tests\nassert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
        "code": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
        "test_imports": [],
        "test_list": [
            "assert check(70) == False",
            "assert check(23) == False",
            "assert check(73) == True"
        ],
        "completion": "Sure, here is a prompt for the few-shot learning model:\n\n```yaml\nfew_shot_learning:\n- language: python\n  code: |\n    def check(num):\n        reverse_num = int(str(num)[::-1])\n        return num == (2 * reverse_num - 1)\n\n    assert check(70) == False\n    assert check(23) == False\n    assert check(73) == True\n```"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given list of digits.",
        "code": "def find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
        "test_imports": [],
        "test_list": [
            "assert find_Max_Num([1,2,3]) == 321",
            "assert find_Max_Num([4,5,6,1]) == 6541",
            "assert find_Max_Num([1,2,3,9]) == 9321"
        ],
        "completion": "\ndef find_Max_Num(digits):\n    digits.sort(reverse=True)\n    num = int(''.join(map(str, digits)))\n    return num\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
        "code": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
        "test_imports": [],
        "test_list": [
            "assert opposite_Signs(1,-2) == True",
            "assert opposite_Signs(3,2) == False",
            "assert opposite_Signs(-10,-10) == False",
            "assert opposite_Signs(-2,2) == True"
        ],
        "completion": "\ndef opposite_Signs(x, y):\n    return (x * y) < 0\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 59,
        "prompt": "Write a function to find the nth octagonal number.",
        "code": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
        "test_imports": [],
        "test_list": [
            "assert is_octagonal(5) == 65",
            "assert is_octagonal(10) == 280",
            "assert is_octagonal(15) == 645"
        ],
        "completion": "\ndef is_octagonal(n):\n    return n * (3 * n - 2)\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 61,
        "prompt": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
        "code": "from collections import defaultdict\ndef count_Substrings(s):\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
        "test_imports": [],
        "test_list": [
            "assert count_Substrings('112112') == 6",
            "assert count_Substrings('111') == 6",
            "assert count_Substrings('1101112') == 12"
        ],
        "completion": "\n# Function to count the number of substrings with the sum of digits equal to their length\ndef count_Substrings(s: str) -> int:\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 62,
        "prompt": "Write a python function to find smallest number in a list.",
        "code": "def smallest_num(xs):\n  return min(xs)\n",
        "test_imports": [],
        "test_list": [
            "assert smallest_num([10, 20, 1, 45, 99]) == 1",
            "assert smallest_num([1, 2, 3]) == 1",
            "assert smallest_num([45, 46, 50, 60]) == 45"
        ],
        "completion": "\ndef smallest_num(nums):\n    return min(nums)\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "code": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
        "test_imports": [],
        "test_list": [
            "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
            "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
            "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
        ],
        "completion": "\ndef max_difference(tuple_list):\n    max_diff = 0\n    for tup in tuple_list:\n        diff = abs(tup[0] - tup[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 64,
        "prompt": "Write a function to sort a list of tuples using the second value of each tuple.",
        "code": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks",
        "test_imports": [],
        "test_list": [
            "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
            "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
            "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
        ],
        "completion": "\ndef subject_marks(subjects):\n    return sorted(subjects, key=lambda x: x[1])\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 65,
        "prompt": "Write a function to flatten a list and sum all of its elements.",
        "code": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
        "test_imports": [],
        "test_list": [
            "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
            "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
            "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
        ],
        "completion": "\ndef recursive_list_sum(lst):\n    total = 0\n    for elem in lst:\n        if isinstance(elem, list):\n            total += recursive_list_sum(elem)\n        else:\n            total += elem\n    return total\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 66,
        "prompt": "Write a python function to count the number of positive numbers in a list.",
        "code": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
        "test_imports": [],
        "test_list": [
            "assert pos_count([1,-2,3,-4]) == 2",
            "assert pos_count([3,4,5,-1]) == 3",
            "assert pos_count([1,2,3,4]) == 4"
        ],
        "completion": "\ndef pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 67,
        "prompt": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "code": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ",
        "test_imports": [],
        "test_list": [
            "assert bell_number(2)==2",
            "assert bell_number(10)==115975",
            "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
        ],
        "completion": "\ndef bell_number(n):\n    if n == 0:\n        return 1\n\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n\nassert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.",
        "code": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
        "test_imports": [],
        "test_list": [
            "assert is_Monotonic([6, 5, 4, 4]) == True",
            "assert is_Monotonic([1, 2, 2, 3]) == True",
            "assert is_Monotonic([1, 3, 2]) == False"
        ],
        "completion": "\n# Function to check whether the given array is monotonic or not\ndef is_Monotonic(arr):\n    # Write your code here\n\n# Test cases\nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.",
        "code": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set",
        "test_imports": [],
        "test_list": [
            "assert is_sublist([2,4,3,5,7],[3,7])==False",
            "assert is_sublist([2,4,3,5,7],[4,3])==True",
            "assert is_sublist([2,4,3,5,7],[1,6])==False"
        ],
        "completion": "\n# Task: Write a function to check whether a list contains the given sublist or not.\n\ndef is_sublist(main_list, sublist):\n    \"\"\"\n    Function to check whether a list contains the given sublist or not.\n    Args:\n    main_list : list - The main list to search in.\n    sublist : list - The sublist to search for.\n\n    Returns:\n    bool : True if the sublist is found in the main list, False otherwise.\n    \"\"\"\n    # Write your code here\n\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.",
        "code": "def find_equal_tuple(Input):\n  k = 0 if not Input else len(Input[0])\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input):\n  return find_equal_tuple(Input) == 1",
        "test_imports": [],
        "test_list": [
            "assert get_equal([(11, 22, 33), (44, 55, 66)]) == True",
            "assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False",
            "assert get_equal([(1, 2), (3, 4)]) == True"
        ],
        "completion": "\ndef get_equal(tuples_list):\n    length_set = {len(t) for t in tuples_list}\n    return len(length_set) == 1\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 71,
        "prompt": "Write a function to sort a list of elements.",
        "code": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
        "test_imports": [],
        "test_list": [
            "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
            "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
            "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
        ],
        "completion": "\ndef comb_sort(arr):\n    gap = len(arr)\n    shrink_factor = 1.3\n    sorted_arr = arr.copy()\n    is_sorted = False\n\n    while not is_sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            is_sorted = True\n        else:\n            is_sorted = False\n\n        i = 0\n        while i + gap < len(arr):\n            if sorted_arr[i] > sorted_arr[i + gap]:\n                sorted_arr[i], sorted_arr[i + gap] = sorted_arr[i + gap], sorted_arr[i]\n                is_sorted = False\n            i += 1\n\n    return sorted_arr\n\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 72,
        "prompt": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
        "code": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
        "test_imports": [],
        "test_list": [
            "assert dif_Square(5) == True",
            "assert dif_Square(10) == False",
            "assert dif_Square(15) == True"
        ],
        "completion": "\ndef dif_Square(num):\n    # Your code here\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
        "code": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True",
        "test_imports": [],
        "test_list": [
            "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False"
        ],
        "completion": "\ndef is_samepatterns(words, patterns):\n    if len(words) != len(patterns):\n        return False\n    word_to_pattern = {}\n    pattern_to_word = {}\n    for word, pattern in zip(words, patterns):\n        if word in word_to_pattern and word_to_pattern[word] != pattern:\n            return False\n        if pattern in pattern_to_word and pattern_to_word[pattern] != word:\n            return False\n        word_to_pattern[word] = pattern\n        pattern_to_word[pattern] = word\n    return True\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "code": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res",
        "test_imports": [],
        "test_list": [
            "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
            "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]",
            "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]"
        ],
        "completion": "\ndef find_tuples(tuples, k):\n    return [t for t in tuples if all(x % k == 0 for x in t)]\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 77,
        "prompt": "Write a python function to find whether a number is divisible by 11.",
        "code": "def is_Diff(n): \n    return (n % 11 == 0) ",
        "test_imports": [],
        "test_list": [
            "assert is_Diff (12345) == False",
            "assert is_Diff(1212112) == True",
            "assert is_Diff(1212) == False"
        ],
        "completion": "\ndef is_Diff(number):\n    # Write your code here to find whether a number is divisible by 11\n    return number % 11 == 0\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.",
        "code": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
        "test_imports": [],
        "test_list": [
            "assert word_len(\"Hadoop\") == False",
            "assert word_len(\"great\") == True",
            "assert word_len(\"structure\") == True"
        ],
        "completion": "\n# Function to check whether the length of the word is odd or not\ndef word_len(word):\n    \"\"\"\n    Check if the length of the word is odd.\n    \n    Args:\n    word (str): Input word\n    \n    Returns:\n    bool: True if the length of the word is odd, False otherwise\n    \"\"\"\n    return len(word) % 2 != 0\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 80,
        "prompt": "Write a function to find the nth tetrahedral number.",
        "code": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6",
        "test_imports": [],
        "test_list": [
            "assert tetrahedral_number(5) == 35",
            "assert tetrahedral_number(6) == 56",
            "assert tetrahedral_number(7) == 84"
        ],
        "completion": "\ndef tetrahedral_number(n):\n    # Write a function to find the nth tetrahedral number\n    pass\n\n# Tests\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(6) == 56\nassert tetrahedral_number(7) == 84\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 82,
        "prompt": "Write a function to find the volume of a sphere.",
        "code": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume",
        "test_imports": [
            "import math"
        ],
        "test_list": [
            "assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)",
            "assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)",
            "assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"
        ],
        "completion": "\nimport math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\nassert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)\nassert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)\n\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 83,
        "prompt": "Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "code": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
        "test_imports": [],
        "test_list": [
            "assert get_Char(\"abc\") == \"f\"",
            "assert get_Char(\"gfg\") == \"t\"",
            "assert get_Char(\"ab\") == \"c\""
        ],
        "completion": "\ndef get_Char(s):\n    char_sum = sum(ord(c) for c in s) % 26\n    return chr(char_sum + 97)\n\nassert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 84,
        "prompt": "Write a function to find the nth number in the newman conway sequence.",
        "code": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "test_imports": [],
        "test_list": [
            "assert sequence(10) == 6",
            "assert sequence(2) == 1",
            "assert sequence(3) == 2"
        ],
        "completion": "\n# Task: Write a function to find the nth number in the newman conway sequence.\n\ndef sequence(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [0] * (n+1)\n        seq[1] = 1\n        seq[2] = 1\n        for i in range(3, n+1):\n            seq[i] = seq[seq[i-1]] + seq[i - seq[i-1]]\n        return seq[-1]\n\n# Tests\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 85,
        "prompt": "Write a function to find the surface area of a sphere.",
        "code": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea",
        "test_imports": [
            "import math"
        ],
        "test_list": [
            "assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)",
            "assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)",
            "assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"
        ],
        "completion": "\n# Task: Write a function to find the surface area of a sphere.\n\nimport math\n\ndef surfacearea_sphere(radius):\n    # Your code here\n    pass\n\n# Tests\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 86,
        "prompt": "Write a function to find nth centered hexagonal number.",
        "code": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1",
        "test_imports": [],
        "test_list": [
            "assert centered_hexagonal_number(10) == 271",
            "assert centered_hexagonal_number(2) == 7",
            "assert centered_hexagonal_number(9) == 217"
        ],
        "completion": "\ndef centered_hexagonal_number(n):\n    if n == 1:\n        return 1\n    return 3*n*(n-1) + 1\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 87,
        "prompt": "Write a function to merge three dictionaries into a single dictionary.",
        "code": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict",
        "test_imports": [],
        "test_list": [
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
        ],
        "completion": "\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 88,
        "prompt": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
        "code": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count",
        "test_imports": [],
        "test_list": [
            "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})",
            "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})",
            "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})"
        ],
        "completion": "\ndef freq_count(arr):\n    freq_dict = {}\n    for ele in arr:\n        if ele in freq_dict:\n            freq_dict[ele] += 1\n        else:\n            freq_dict[ele] = 1\n    return freq_dict\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 89,
        "prompt": "Write a function to find the closest smaller number than n.",
        "code": "def closest_num(N):\n  return (N - 1)",
        "test_imports": [],
        "test_list": [
            "assert closest_num(11) == 10",
            "assert closest_num(7) == 6",
            "assert closest_num(12) == 11"
        ],
        "completion": "\nWrite a function to find the closest smaller number than n.\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 90,
        "prompt": "Write a python function to find the length of the longest word.",
        "code": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
        "test_imports": [],
        "test_list": [
            "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
            "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
        ],
        "completion": "\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 91,
        "prompt": "Write a function to check if a string is present as a substring in a given list of string values.",
        "code": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
        "test_imports": [],
        "test_list": [
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
        ],
        "completion": "\ndef find_substring(str_list, target_substring):\n    # write your code here\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.",
        "code": "def is_undulating(n): \n\tn = str(n)\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True",
        "test_imports": [],
        "test_list": [
            "assert is_undulating(1212121) == True",
            "assert is_undulating(1991) == False",
            "assert is_undulating(121) == True"
        ],
        "completion": "\ndef is_undulating(num):\n    num_str = str(num)\n    if len(num_str) < 3:\n        return False\n    for i in range(2, len(num_str)):\n        if (num_str[i] > num_str[i-1] and num_str[i-1] < num_str[i-2]) or (num_str[i] < num_str[i-1] and num_str[i-1] > num_str[i-2]):\n            continue\n        else:\n            return False\n    return True\n\nassert is_undulating(1212121) == True\nassert is_undulating(1991) == False\nassert is_undulating(121) == True\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)",
        "test_imports": [],
        "test_list": [
            "assert power(3,4) == 81",
            "assert power(2,3) == 8",
            "assert power(5,5) == 3125"
        ],
        "completion": "\n# Function to calculate the value of 'a' to the power 'b'\ndef power(a, b):\n    return a ** b\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 94,
        "prompt": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
        "code": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
        "test_imports": [],
        "test_list": [
            "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
            "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
            "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
        ],
        "completion": "\ndef index_minimum(tuples):\n    min_tuple = min(tuples, key=lambda x: x[1])\n    return min_tuple[0]\n\n# Test cases\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 95,
        "prompt": "Write a python function to find the length of the smallest list in a list of lists.",
        "code": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ",
        "test_imports": [],
        "test_list": [
            "assert Find_Min_Length([[1],[1,2]]) == 1",
            "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
            "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
        ],
        "completion": "\ndef Find_Min_Length(list_of_lists):\n    min_length = min(len(lst) for lst in list_of_lists)\n    return min_length\n\nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.",
        "code": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
        "test_imports": [],
        "test_list": [
            "assert divisor(15) == 4",
            "assert divisor(12) == 6",
            "assert divisor(9) == 3"
        ],
        "completion": "\ndef divisor(num):\n    count = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 97,
        "prompt": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
        "code": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n",
        "test_imports": [],
        "test_list": [
            "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
            "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
            "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
        ],
        "completion": "\ndef frequency_lists(lists):\n    flattened_list = [item for sublist in lists for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "code": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
        "test_imports": [
            "import math"
        ],
        "test_list": [
            "assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)",
            "assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)",
            "assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)"
        ],
        "completion": "\ndef multiply_num(nums):\n    result = 1\n    for num in nums:\n        result *= num\n    return result / len(nums)\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "code": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ",
        "test_imports": [],
        "test_list": [
            "assert decimal_to_binary(8) == '1000'",
            "assert decimal_to_binary(18) == '10010'",
            "assert decimal_to_binary(7) == '111'"
        ],
        "completion": "\n# Task: Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\ndef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return binary\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "code": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i",
        "test_imports": [],
        "test_list": [
            "assert next_smallest_palindrome(99)==101",
            "assert next_smallest_palindrome(1221)==1331",
            "assert next_smallest_palindrome(120)==121"
        ],
        "completion": "\ndef next_smallest_palindrome(num):\n    num += 1\n    while str(num) != str(num)[::-1]:\n        num += 1\n    return num\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 101,
        "prompt": "Write a function to find the kth element in the given array using 1-based indexing.",
        "code": "def kth_element(arr, k):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]",
        "test_imports": [],
        "test_list": [
            "assert kth_element([12,3,5,7,19], 2) == 3",
            "assert kth_element([17,24,8,23], 3) == 8",
            "assert kth_element([16,21,25,36,4], 4) == 36"
        ],
        "completion": "\ndef kth_element(arr, k):\n    # Write your code here\n    pass\n\n# Test cases\nassert kth_element([12,3,5,7,19], 2) == 3\nassert kth_element([17,24,8,23], 3) == 8\nassert kth_element([16,21,25,36,4], 4) == 36\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 102,
        "prompt": "Write a function to convert a snake case string to camel case string.",
        "code": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "test_imports": [],
        "test_list": [
            "assert snake_to_camel('python_program')=='PythonProgram'",
            "assert snake_to_camel('python_language')==('PythonLanguage')",
            "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
        ],
        "completion": "\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 103,
        "prompt": "Write a function to find the Eulerian number a(n, m).",
        "code": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
        "test_imports": [],
        "test_list": [
            "assert eulerian_num(3, 1) == 4",
            "assert eulerian_num(4, 1) == 11",
            "assert eulerian_num(5, 3) == 26"
        ],
        "completion": "\n# Function to find the Eulerian number a(n, m)\ndef eulerian_num(n, m):\n    if n == 0 and m == 0:\n        return 1\n    elif (n == 0 and m != 0) or (m > n + 1):\n        return 0\n    else:\n        return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n\n# Test cases\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.",
        "code": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n",
        "test_imports": [],
        "test_list": [
            "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
            "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
        ],
        "completion": "\ndef sort_sublists(list_of_lists):\n    return [sorted(sublist, key=str.lower) for sublist in list_of_lists]\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 105,
        "prompt": "Write a python function to count true booleans in the given list.",
        "code": "def count(lst):   \n    return sum(lst) ",
        "test_imports": [],
        "test_list": [
            "assert count([True,False,True]) == 2",
            "assert count([False,False]) == 0",
            "assert count([True,True,True]) == 3"
        ],
        "completion": "\ndef count(bool_list):\n    return bool_list.count(True)\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 106,
        "prompt": "Write a function to append the given list to the given tuples.",
        "code": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ",
        "test_imports": [],
        "test_list": [
            "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
            "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
            "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
        ],
        "completion": "\ndef add_lists(lst, tup):\n    return tup + tuple(lst)\n\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 108,
        "prompt": "Write a function to merge three lists into a single sorted list.",
        "code": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)",
        "test_imports": [],
        "test_list": [
            "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
            "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
            "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
        ],
        "completion": "\ndef merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 109,
        "prompt": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "code": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
        "test_imports": [],
        "test_list": [
            "assert odd_Equivalent(\"011001\",6) == 3",
            "assert odd_Equivalent(\"11011\",5) == 4",
            "assert odd_Equivalent(\"1010\",4) == 2"
        ],
        "completion": "\ndef odd_Equivalent(s: str, k: int) -> int:\n    count = 0\n    for _ in range(k):\n        s = s[-1] + s[:-1]  # rotate the string to the right\n        count += s.count('1') % 2\n    return count\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 111,
        "prompt": "Write a function to find the common elements in given nested lists.",
        "code": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result",
        "test_imports": [],
        "test_list": [
            "assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])",
            "assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])",
            "assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])"
        ],
        "completion": "\ndef common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists:\n        common_elements = common_elements.intersection(set(lst))\n    return list(common_elements)\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 113,
        "prompt": "Write a function to check if a string represents an integer or not.",
        "code": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False",
        "test_imports": [],
        "test_list": [
            "assert check_integer(\"python\")==False",
            "assert check_integer(\"1\")==True",
            "assert check_integer(\"12345\")==True"
        ],
        "completion": "\ndef check_integer(string):\n    # Write your code here\n    pass\n\n# Your code should pass these tests\nassert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.",
        "code": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit",
        "test_imports": [],
        "test_list": [
            "assert empty_dit([{},{},{}])==True",
            "assert empty_dit([{1,2},{},{}])==False",
            "assert empty_dit({})==True"
        ],
        "completion": "\n# Function to check whether all dictionaries in a list are empty or not\ndef empty_dit(dictionaries):\n    # Write your code here\n\n# Test cases\nassert empty_dit([{}, {}, {}]) == True\nassert empty_dit([{1, 2}, {}, {}]) == False\nassert empty_dit({}) == True\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into a single integer.",
        "code": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result",
        "test_imports": [],
        "test_list": [
            "assert tuple_to_int((1,2,3))==123",
            "assert tuple_to_int((4,5,6))==456",
            "assert tuple_to_int((5,6,7))==567"
        ],
        "completion": "\n# Function to convert a given tuple of positive integers into a single integer.\ndef tuple_to_int(t):\n    # Your code here\n    pass\n\n# Tests\nassert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 117,
        "prompt": "Write a function to convert all possible convertible elements in a list of lists to floats.",
        "code": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return res",
        "test_imports": [],
        "test_list": [
            "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]",
            "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]",
            "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"
        ],
        "completion": "\ndef list_to_float(list_of_lists):\n    return [(float(x), float(y)) for x, y in list_of_lists]\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 118,
        "prompt": "Write a function to convert a string to a list of strings split on the space character.",
        "code": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
        "test_imports": [],
        "test_list": [
            "assert string_to_list(\"python programming\")==['python','programming']",
            "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
            "assert string_to_list(\"write a program\")==['write','a','program']"
        ],
        "completion": "\ndef string_to_list(input_string):\n    return input_string.split()\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.",
        "code": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)",
        "test_imports": [],
        "test_list": [
            "assert search([1,1,2,2,3]) == 3",
            "assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8",
            "assert search([1,2,2,3,3,4,4]) == 1"
        ],
        "completion": "\ndef search(arr):\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n\n        if (mid % 2 == 0 and arr[mid] == arr[mid + 1]) or (mid % 2 != 0 and arr[mid] == arr[mid - 1]):\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return arr[left]\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 120,
        "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
        "code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max",
        "test_imports": [],
        "test_list": [
            "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
            "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
            "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
        ],
        "completion": "\ndef max_product_tuple(lst):\n    max_product = 0\n    for pair in lst:\n        product = abs(pair[0] * pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)",
        "test_imports": [],
        "test_list": [
            "assert amicable_numbers_sum(999)==504",
            "assert amicable_numbers_sum(9999)==31626",
            "assert amicable_numbers_sum(99)==0"
        ],
        "completion": "\nassert amicable_numbers_sum(999) == 504\nassert amicable_numbers_sum(9999) == 31626\nassert amicable_numbers_sum(99) == 0\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 124,
        "prompt": "Write a function to get the angle of a complex number.",
        "code": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle",
        "test_imports": [
            "import math"
        ],
        "test_list": [
            "assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)",
            "assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)",
            "assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)"
        ],
        "completion": "\ndef angle_complex(real, imag):\n    import math\n    angle = math.atan2(imag, real)\n    return angle\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "def find_length(string): \n\tn = len(string)\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0",
        "test_imports": [],
        "test_list": [
            "assert find_length(\"11000010001\") == 6",
            "assert find_length(\"10111\") == 1",
            "assert find_length(\"11011101100101\") == 2"
        ],
        "completion": "\ndef find_length(s: str) -> int:\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    diff_dict = {0: -1}  # Initialize the dictionary with initial difference of 0 at index -1\n    for i in range(len(s)):\n        if s[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = count_0 - count_1\n        if diff in diff_dict:\n            max_diff = max(max_diff, i - diff_dict[diff])\n        else:\n            diff_dict[diff] = i\n    return max_diff\n\nassert find_length(\"11000010001\") == 6\nassert find_length(\"10111\") == 1\nassert find_length(\"11011101100101\") == 2\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
        "code": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
        "test_imports": [],
        "test_list": [
            "assert sum(10,15) == 6",
            "assert sum(100,150) == 93",
            "assert sum(4,6) == 3"
        ],
        "completion": "\ndef sum_of_common_divisors(num1, num2):\n    common_divisors = [i for i in range(1, min(num1, num2) + 1) if num1 % i == 0 and num2 % i == 0]\n    return sum(common_divisors)\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 127,
        "prompt": "Write a function to multiply two integers.",
        "code": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
        "test_imports": [],
        "test_list": [
            "assert multiply_int(10,20)==200",
            "assert multiply_int(5,10)==50",
            "assert multiply_int(4,8)==32"
        ],
        "completion": "\ndef multiply_int(a, b):\n    return a * b\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 128,
        "prompt": "Write a function to find words that are longer than n characters from a given list of words.",
        "code": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
        "test_imports": [],
        "test_list": [
            "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
            "assert long_words(2,\"writing a program\")==['writing','program']",
            "assert long_words(5,\"sorting list\")==['sorting']"
        ],
        "completion": "\ndef long_words(n, words):\n    # Write your code here\n    return [word for word in words.split() if len(word) > n]\n\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']\nassert long_words(2, \"writing a program\") == ['writing', 'program']\nassert long_words(5, \"sorting list\") == ['sorting']\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 129,
        "prompt": "Write a function to calculate whether the matrix is a magic square.",
        "code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True",
        "test_imports": [],
        "test_list": [
            "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
        ],
        "completion": "\ndef magic_square_test(matrix):\n    n = len(matrix)\n    magic_sum = n * (n**2 + 1) // 2\n\n    # Check rows and columns\n    if any(sum(row) != magic_sum for row in matrix) or any(sum(column) != magic_sum for column in zip(*matrix)):\n        return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != magic_sum or sum(matrix[i][n - i - 1] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.",
        "code": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]",
        "test_imports": [],
        "test_list": [
            "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2",
            "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8",
            "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20"
        ],
        "completion": "\ndef max_occurrences(nums):\n    frequency_map = {}\n    max_num = None\n    max_freq = -1\n    \n    for num in nums:\n        if num in frequency_map:\n            frequency_map[num] += 1\n        else:\n            frequency_map[num] = 1\n        \n        if frequency_map[num] > max_freq:\n            max_freq = frequency_map[num]\n            max_num = num\n    \n    return max_num\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
        "code": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
        "test_imports": [],
        "test_list": [
            "assert reverse_vowels(\"Python\") == \"Python\"",
            "assert reverse_vowels(\"USA\") == \"ASU\"",
            "assert reverse_vowels(\"ab\") == \"ab\""
        ],
        "completion": "\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 132,
        "prompt": "Write a function to convert a tuple to a string.",
        "code": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
        "test_imports": [],
        "test_list": [
            "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
            "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
            "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
        ],
        "completion": "\ndef tup_string(tup):\n    return ''.join(tup)\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
        "code": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
        "test_imports": [],
        "test_list": [
            "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
            "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
            "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
        ],
        "completion": "\ndef sum_negativenum(nums):\n    # Write your code here\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 135,
        "prompt": "Write a function to find the nth hexagonal number.",
        "code": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ",
        "test_imports": [],
        "test_list": [
            "assert hexagonal_num(10) == 190",
            "assert hexagonal_num(5) == 45",
            "assert hexagonal_num(7) == 91"
        ],
        "completion": "\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 137,
        "prompt": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
        "code": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return n1/(n-n1)",
        "test_imports": [
            "import math"
        ],
        "test_list": [
            "assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)",
            "assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)",
            "assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"
        ],
        "completion": "\ndef zero_count(arr):\n    count_zero = sum(1 for num in arr if num == 0)\n    count_nonzero = sum(1 for num in arr if num != 0)\n    return count_zero / count_nonzero if count_nonzero != 0 else 0\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
        "test_imports": [],
        "test_list": [
            "assert is_Sum_Of_Powers_Of_Two(10) == True",
            "assert is_Sum_Of_Powers_Of_Two(7) == False",
            "assert is_Sum_Of_Powers_Of_Two(14) == True"
        ],
        "completion": "\ndef is_Sum_Of_Powers_Of_Two(num):\n    # Write your code here\n    pass\n\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 139,
        "prompt": "Write a function to find the circumference of a circle.",
        "code": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter",
        "test_imports": [
            "import math"
        ],
        "test_list": [
            "assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)",
            "assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)",
            "assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)"
        ],
        "completion": "\ndef circle_circumference(radius):\n    # Write your code here\n    pass\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 140,
        "prompt": "Write a function to flatten the list of lists into a single set of numbers.",
        "code": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ",
        "test_imports": [],
        "test_list": [
            "assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])",
            "assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])",
            "assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])"
        ],
        "completion": "\ndef extract_singly(list_of_lists):\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    return flattened_list\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 141,
        "prompt": "Write a function to sort a list of elements.",
        "code": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
        "test_imports": [],
        "test_list": [
            "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
            "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
            "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
        ],
        "completion": "\ndef pancake_sort(arr):\n    # Implement pancake sorting algorithm here\n    # ...\n    return sorted(arr)\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 142,
        "prompt": "Write a function to count number items that are identical in the same position of three given lists.",
        "code": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result",
        "test_imports": [],
        "test_list": [
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
            "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
        ],
        "completion": "\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.",
        "code": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ",
        "test_imports": [],
        "test_list": [
            "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
            "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
            "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
        ],
        "completion": "\ndef find_lists(input_tuple):\n    count = sum(1 for x in input_tuple if isinstance(x, list))\n    return count\n\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1\n"
    },
    {
        "source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
        "code": "def max_Abs_Diff(arr): \n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
        "test_imports": [],
        "test_list": [
            "assert max_Abs_Diff((2,1,5,3)) == 4",
            "assert max_Abs_Diff((9,3,2,5,1)) == 8",
            "assert max_Abs_Diff((3,2,1)) == 2"
        ],
        "completion": "\ndef max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Args:\n    arr : list[int] : The input array of integers\n\n    Returns:\n    int : The maximum absolute difference between any two elements in the array\n    \"\"\"\n\n    # Your code here\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 160,
        "prompt": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
        "code": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None",
        "test_imports": [],
        "test_list": [
            "assert find_solution(2, 3, 7) == (2, 1)",
            "assert find_solution(4, 2, 7) == None",
            "assert find_solution(1, 13, 17) == (4, 1)"
        ],
        "completion": "\ndef find_solution(a, b, n):\n    for x in range(n + 1):\n        y = (n - a * x) / b\n        if y.is_integer():\n            return (x, int(y))\n    return None\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.",
        "code": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result",
        "test_imports": [],
        "test_list": [
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]"
        ],
        "completion": "\ndef remove_elements(main_list, elements_to_remove):\n    return [x for x in main_list if x not in elements_to_remove]\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 162,
        "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "code": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)",
        "test_imports": [],
        "test_list": [
            "assert sum_series(6) == 12",
            "assert sum_series(10) == 30",
            "assert sum_series(9) == 25"
        ],
        "completion": "\ndef sum_series(n):\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2*i\n    return total_sum\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 163,
        "prompt": "Write a function to calculate the area of a regular polygon given the length and number of its sides.",
        "code": "from math import tan, pi\ndef area_polygon(s, l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area",
        "test_imports": [
            "import math"
        ],
        "test_list": [
            "assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)",
            "assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)",
            "assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)"
        ],
        "completion": "\nimport math\n\nassert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)\nassert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)\nassert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 164,
        "prompt": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "code": "import math \ndef div_sum(n): \n  total = 1\n  i = 2\n\n  while i * i <= n:\n    if (n % i == 0):\n      total = (total + i + math.floor(n / i))\n    i += 1\n\n  return total\n\ndef are_equivalent(num1, num2): \n    return div_sum(num1) == div_sum(num2); ",
        "test_imports": [],
        "test_list": [
            "assert are_equivalent(36, 57) == False",
            "assert are_equivalent(2, 4) == False",
            "assert are_equivalent(23, 47) == True"
        ],
        "completion": "\ndef are_equivalent(num1, num2):\n    sum_divisors1 = sum([i for i in range(1, num1) if num1 % i == 0])\n    sum_divisors2 = sum([i for i in range(1, num2) if num2 % i == 0])\n    return sum_divisors1 == sum_divisors2\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 165,
        "prompt": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "code": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
        "test_imports": [],
        "test_list": [
            "assert count_char_position(\"xbcefg\") == 2",
            "assert count_char_position(\"ABcED\") == 3",
            "assert count_char_position(\"AbgdeF\") == 5"
        ],
        "completion": "\ndef count_char_position(s):\n    \"\"\"\n    Counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \n    Args:\n    - s: input string\n    \n    Returns:\n    - count: the number of characters that occur at the same position in the string as in the English alphabet\n    \"\"\"\n    count = sum(1 for i, char in enumerate(s) if char.lower() == chr(97 + i).lower())\n    return count\n\n# Test cases\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 166,
        "prompt": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "code": "def find_even_pair(A): \n  count = 0\n  for i in range(0, len(A)): \n    for j in range(i+1, len(A)): \n        if ((A[i] ^ A[j]) % 2 == 0): \n          count += 1\n\n  return count",
        "test_imports": [],
        "test_list": [
            "assert find_even_pair([5, 4, 7, 2, 1]) == 4",
            "assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9",
            "assert find_even_pair([1, 2, 3]) == 1"
        ],
        "completion": "\n# Task: Write a function that counts the number of pairs of integers in a list that xor to an even number.\n\ndef find_even_pair(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count\n\n# Tests\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 167,
        "prompt": "Write a python function to find the smallest power of 2 greater than or equal to n.",
        "code": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n\n  count = 0\n  while n != 0: \n    n >>= 1\n    count += 1\n\n  return 1 << count; ",
        "test_imports": [],
        "test_list": [
            "assert next_power_of_2(0) == 1",
            "assert next_power_of_2(5) == 8",
            "assert next_power_of_2(17) == 32"
        ],
        "completion": "\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 168,
        "prompt": "Write a function to count the number of occurrences of a number in a given list.",
        "code": "def frequency(a,x): \n    count = 0  \n    for i in a: \n      if i == x: \n        count += 1\n\n    return count ",
        "test_imports": [],
        "test_list": [
            "assert frequency([1,2,3], 4) == 0",
            "assert frequency([1,2,2,3,3,3,4], 3) == 3",
            "assert frequency([0,1,2,3,1,2], 1) == 2"
        ],
        "completion": "\ndef frequency(lst, num):\n    count = lst.count(num)\n    return count\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 170,
        "prompt": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
        "code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ",
        "test_imports": [],
        "test_list": [
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16",
            "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"
        ],
        "completion": "\ndef sum_range_list(nums, start, end):\n    return sum(nums[start:end+1])\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 171,
        "prompt": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "code": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter",
        "test_imports": [],
        "test_list": [
            "assert perimeter_pentagon(5) == 25",
            "assert perimeter_pentagon(10) == 50",
            "assert perimeter_pentagon(15) == 75"
        ],
        "completion": "\n# Function to find the perimeter of a regular pentagon from the length of its sides\ndef perimeter_pentagon(side_length):\n    perimeter = 5 * side_length\n    return perimeter\n\n# Tests\nassert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50\nassert perimeter_pentagon(15) == 75\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 172,
        "prompt": "Write a function to count the number of occurence of the string 'std' in a given string.",
        "code": "def count_occurance(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n      count = count + 1\n  return count",
        "test_imports": [],
        "test_list": [
            "assert count_occurance(\"letstdlenstdporstd\") == 3",
            "assert count_occurance(\"truststdsolensporsd\") == 1",
            "assert count_occurance(\"makestdsostdworthit\") == 2",
            "assert count_occurance(\"stds\") == 1",
            "assert count_occurance(\"\") == 0"
        ],
        "completion": "\ndef count_occurance(input_string):\n    return input_string.count('std')\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.",
        "code": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ",
        "test_imports": [],
        "test_list": [
            "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
            "assert check_type((1, 2, \"4\") ) == False",
            "assert check_type((3, 2, 1, 4, 5) ) == True"
        ],
        "completion": "\ndef check_type(tup):\n    return len(set(map(type, tup))) == 1\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 223,
        "prompt": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "code": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1",
        "test_imports": [],
        "test_list": [
            "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
            "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
            "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
            "assert is_majority([1, 1, 2, 2], 5, 1) == False"
        ],
        "completion": "\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True\nassert is_majority([1, 1, 2, 2], 5, 1) == False\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 224,
        "prompt": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
        "code": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
        "test_imports": [],
        "test_list": [
            "assert count_Set_Bits(2) == 1",
            "assert count_Set_Bits(4) == 1",
            "assert count_Set_Bits(6) == 2"
        ],
        "completion": "\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
        "code": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
        "test_imports": [],
        "test_list": [
            "assert odd_values_string('abcdef') == 'ace'",
            "assert odd_values_string('python') == 'pto'",
            "assert odd_values_string('data') == 'dt'",
            "assert odd_values_string('lambs') == 'lms'"
        ],
        "completion": "\ndef odd_values_string(input_string):\n    return input_string[::2]\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 227,
        "prompt": "Write a function to find minimum of three numbers.",
        "code": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ",
        "test_imports": [],
        "test_list": [
            "assert min_of_three(10,20,0)==0",
            "assert min_of_three(19,15,18)==15",
            "assert min_of_three(-10,-20,-30)==-30"
        ],
        "completion": "\n# Function to find minimum of three numbers\ndef min_of_three(num1, num2, num3):\n    return min(num1, num2, num3)\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.",
        "code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False",
        "test_imports": [],
        "test_list": [
            "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
            "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
            "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
        ],
        "completion": "\n# Write a python function to check whether all the bits are unset in the given range or not.\n\ndef all_Bits_Set_In_The_Given_Range(num, start_bit, end_bit):\n    # Write your code here\n    pass\n\n# Tests\nassert all_Bits_Set_In_The_Given_Range(4, 1, 2) == True\nassert all_Bits_Set_In_The_Given_Range(17, 2, 4) == True\nassert all_Bits_Set_In_The_Given_Range(39, 4, 6) == False\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 229,
        "prompt": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "code": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
        "test_imports": [],
        "test_list": [
            "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
            "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
            "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
        ],
        "completion": "\ndef re_arrange_array(arr, n):\n    negative = [x for x in arr[:n] if x < 0]\n    positive = [x for x in arr[:n] if x >= 0]\n    return negative + positive\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 230,
        "prompt": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "code": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
        "test_imports": [],
        "test_list": [
            "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
            "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
            "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
        ],
        "completion": "\ndef replace_blank(input_string, character):\n    return input_string.replace(' ', character)\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 232,
        "prompt": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
        "code": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest",
        "test_imports": [],
        "test_list": [
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])",
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])",
            "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])"
        ],
        "completion": "\ndef larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.",
        "code": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface",
        "test_imports": [
            "import math"
        ],
        "test_list": [
            "assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)",
            "assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)",
            "assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)"
        ],
        "completion": "\n# Task: Write a function to find the lateral surface area of a cylinder.\n\nimport math\n\ndef lateralsuface_cylinder(radius, height):\n    # Write your code here\n    return 2 * math.pi * radius * height\n\n# Tests\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 234,
        "prompt": "Write a function to find the volume of a cube given its side length.",
        "code": "def volume_cube(l):\n  volume = l * l * l\n  return volume",
        "test_imports": [],
        "test_list": [
            "assert volume_cube(3)==27",
            "assert volume_cube(2)==8",
            "assert volume_cube(5)==125"
        ],
        "completion": "\ndef volume_cube(side_length):\n    return side_length ** 3\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 235,
        "prompt": "Write a python function to set all even bits of a given number.",
        "code": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ",
        "test_imports": [],
        "test_list": [
            "assert even_bit_set_number(10) == 10",
            "assert even_bit_set_number(20) == 30",
            "assert even_bit_set_number(30) == 30"
        ],
        "completion": "\ndef even_bit_set_number(num):\n    return num | 0b1010101010101010\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 237,
        "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
        "code": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ",
        "test_imports": [],
        "test_list": [
            "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
            "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
            "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
        ],
        "completion": "\ndef check_occurences(lst):\n    occurences = {}\n    for item in lst:\n        sorted_item = tuple(sorted(item))\n        if sorted_item in occurences:\n            occurences[sorted_item] += 1\n        else:\n            occurences[sorted_item] = 1\n    return occurences\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 238,
        "prompt": "Write a python function to count the number of non-empty substrings of a given string.",
        "code": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
        "test_imports": [],
        "test_list": [
            "assert number_of_substrings(\"abc\") == 6",
            "assert number_of_substrings(\"abcd\") == 10",
            "assert number_of_substrings(\"abcde\") == 15"
        ],
        "completion": "\n# Function to count the number of non-empty substrings of a given string\ndef number_of_substrings(s: str) -> int:\n    # Your code here\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 239,
        "prompt": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "code": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]",
        "test_imports": [],
        "test_list": [
            "assert get_total_number_of_sequences(10, 4) == 4",
            "assert get_total_number_of_sequences(5, 2) == 6",
            "assert get_total_number_of_sequences(16, 3) == 84"
        ],
        "completion": "\ndef get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    a, b, c = m, m, 1\n    for _ in range(n - 1):\n        a, b, c = b, (m - 1) * a + (m - 2) * b, a + b + c\n    return a + b + c\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 240,
        "prompt": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "code": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n",
        "test_imports": [],
        "test_list": [
            "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
            "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
            "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
        ],
        "completion": "\ndef replace_list(lst1, lst2):\n    lst1[-1:] = lst2\n    return lst1\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 242,
        "prompt": "Write a function to count the total number of characters in a string.",
        "code": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
        "test_imports": [],
        "test_list": [
            "assert count_charac(\"python programming\")==18",
            "assert count_charac(\"language\")==8",
            "assert count_charac(\"words\")==5"
        ],
        "completion": "\ndef count_charac(text: str) -> int:\n    # write your code here\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.",
        "code": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ",
        "test_imports": [],
        "test_list": [
            "assert next_Perfect_Square(35) == 36",
            "assert next_Perfect_Square(6) == 9",
            "assert next_Perfect_Square(9) == 16"
        ],
        "completion": "\ndef next_Perfect_Square(num):\n    return (int(num**0.5) + 1) ** 2\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 245,
        "prompt": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "code": "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum",
        "test_imports": [],
        "test_list": [
            "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194",
            "assert max_sum([80, 60, 30, 40, 20, 10]) == 210",
            "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138"
        ],
        "completion": "\ndef max_sum(arr):\n    n = len(arr)\n    max_inc = [0] * n\n    max_dec = [0] * n\n    \n    for i in range(n):\n        max_inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_inc[i] = max(max_inc[i], max_inc[j] + arr[i])\n\n    for i in range(n-1, -1, -1):\n        max_dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                max_dec[i] = max(max_dec[i], max_dec[j] + arr[i])\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, max_inc[i] + max_dec[i] - arr[i])\n\n    return max_sum\n\n\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\nassert max_sum([80, 60, 30, 40, 20, 10]) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.",
        "code": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;",
        "test_imports": [
            "import math"
        ],
        "test_list": [
            "assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)",
            "assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)",
            "assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)"
        ],
        "completion": "\ndef babylonian_squareroot(n: float) -> float:\n    guess = n / 2.0\n    while abs(guess * guess - n) > 0.0001:\n        guess = (guess + n / guess) / 2.0\n    return guess\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 247,
        "prompt": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "code": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]",
        "test_imports": [],
        "test_list": [
            "assert lps(\"TENS FOR TENS\") == 5",
            "assert lps(\"CARDIO FOR CARDS\") == 7",
            "assert lps(\"PART OF THE JOURNEY IS PART\") == 9"
        ],
        "completion": "\ndef lps(s):\n    # Write your code here to find the length of the longest palindromic subsequence in the given string\n    pass\n\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 248,
        "prompt": "Write a function that takes in an integer n and calculates the harmonic sum of n-1.",
        "code": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ",
        "test_imports": [
            "import math"
        ],
        "test_list": [
            "assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)",
            "assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)",
            "assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)"
        ],
        "completion": "\nimport math\n\n# Write a function that takes in an integer n and calculates the harmonic sum of n-1.\ndef harmonic_sum(n):\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum\n\n# Your code should pass these tests:\nassert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)\nassert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)\nassert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 249,
        "prompt": "Write a function to find the intersection of two arrays.",
        "code": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result",
        "test_imports": [],
        "test_list": [
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
        ],
        "completion": "\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 250,
        "prompt": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "code": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
        "test_imports": [],
        "test_list": [
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
        ],
        "completion": "\ndef count_X(input_tuple, element):\n    return input_tuple.count(element)\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 251,
        "prompt": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "code": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list",
        "test_imports": [],
        "test_list": [
            "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']",
            "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']",
            "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']"
        ],
        "completion": "\ndef insert_element(lst, elem):\n    result = []\n    for item in lst:\n        result.extend([elem, item])\n    return result\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.",
        "code": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) ",
        "test_imports": [],
        "test_list": [
            "assert convert(1) == (1.0, 0.0)",
            "assert convert(4) == (4.0,0.0)",
            "assert convert(5) == (5.0,0.0)"
        ],
        "completion": "\ndef convert(complex_num):\n    # write your code here\n    pass\n\nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0, 0.0)\nassert convert(5) == (5.0, 0.0)\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 253,
        "prompt": "Write a python function that returns the number of integer elements in a given list.",
        "code": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
        "test_imports": [],
        "test_list": [
            "assert count_integer([1,2,'abc',1.2]) == 2",
            "assert count_integer([1,2,3]) == 3",
            "assert count_integer([1,1.2,4,5.1]) == 2"
        ],
        "completion": "\ndef count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \n    Args:\n    - lst (list): List of elements\n    \n    Returns:\n    - count (int): Number of integer elements in the list\n    \"\"\"\n    # Your code here\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 255,
        "prompt": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
        "code": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n",
        "test_imports": [],
        "test_list": [
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
        ],
        "completion": "\ndef combinations_colors(colors, n):\n    from itertools import product\n    return list(product(colors, repeat=n))\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 256,
        "prompt": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "code": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
        "test_imports": [],
        "test_list": [
            "assert count_Primes_nums(5) == 2",
            "assert count_Primes_nums(10) == 4",
            "assert count_Primes_nums(100) == 25"
        ],
        "completion": "\ndef count_Primes_nums(num):\n    count = 0\n    if num <= 1:\n        return count\n    else:\n        for i in range(2, num):\n            if all(i % j != 0 for j in range(2, int(i ** 0.5) + 1)):\n                count += 1\n        return count\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 257,
        "prompt": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
        "code": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)",
        "test_imports": [],
        "test_list": [
            "assert swap_numbers(10,20)==(20,10)",
            "assert swap_numbers(15,17)==(17,15)",
            "assert swap_numbers(100,200)==(200,100)"
        ],
        "completion": "\ndef swap_numbers(num1, num2):\n    return (num2, num1)\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 259,
        "prompt": "Write a function to maximize the given two tuples.",
        "code": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test_imports": [],
        "test_list": [
            "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
            "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
            "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
        ],
        "completion": "\ndef maximize_elements(tuple1, tuple2):\n    max_tuple = [(max(t1[0], t2[0]), max(t1[1], t2[1])) for t1, t2 in zip(tuple1, tuple2)]\n    return tuple(max_tuple)\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
        "test_imports": [],
        "test_list": [
            "assert newman_prime(3) == 7",
            "assert newman_prime(4) == 17",
            "assert newman_prime(5) == 41"
        ],
        "completion": "\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 261,
        "prompt": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "code": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test_imports": [],
        "test_list": [
            "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
            "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
            "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
        ],
        "completion": "\ndef division_elements(tuple1, tuple2):\n    result = tuple(a // b for a, b in zip(tuple1, tuple2))\n    return result\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 262,
        "prompt": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "code": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]",
        "test_imports": [],
        "test_list": [
            "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
            "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
            "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
        ],
        "completion": "\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.",
        "code": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age",
        "test_imports": [],
        "test_list": [
            "assert dog_age(12)==61",
            "assert dog_age(15)==73",
            "assert dog_age(24)==109"
        ],
        "completion": "\n# function to calculate dog's age in dog's years\ndef dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 265,
        "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "code": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]",
        "test_imports": [],
        "test_list": [
            "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]",
            "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]",
            "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"
        ],
        "completion": "\ndef list_split(lst, n):\n    result = []\n    for i in range(n):\n        result.append(lst[i::n])\n    return result\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 266,
        "prompt": "Write a function to find the lateral surface area of a cube given its side length.",
        "code": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA",
        "test_imports": [],
        "test_list": [
            "assert lateralsurface_cube(5)==100",
            "assert lateralsurface_cube(9)==324",
            "assert lateralsurface_cube(10)==400"
        ],
        "completion": "\ndef lateralsurface_cube(side_length):\n    return 4 * side_length ** 2\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 267,
        "prompt": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
        "test_imports": [],
        "test_list": [
            "assert square_Sum(2) == 10",
            "assert square_Sum(3) == 35",
            "assert square_Sum(4) == 84"
        ],
        "completion": "\ndef square_Sum(n):\n    return sum([(2*i-1)**2 for i in range(1, n+1)])\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 268,
        "prompt": "Write a function to find the n'th star number.",
        "code": "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) ",
        "test_imports": [],
        "test_list": [
            "assert find_star_num(3) == 37",
            "assert find_star_num(4) == 73",
            "assert find_star_num(5) == 121"
        ],
        "completion": "\ndef find_star_num(n):\n    # Your code here\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 269,
        "prompt": "Write a function to find the ascii value of a character.",
        "code": "def ascii_value(k):\n  ch=k\n  return ord(ch)",
        "test_imports": [],
        "test_list": [
            "assert ascii_value('A')==65",
            "assert ascii_value('R')==82",
            "assert ascii_value('S')==83"
        ],
        "completion": "\ndef ascii_value(char):\n    return ord(char)\n\nassert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions of a list.",
        "code": "def sum_even_and_even_index(arr):  \n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
        "test_imports": [],
        "test_list": [
            "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30",
            "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26",
            "assert sum_even_and_even_index([5, 6, 12, 1]) == 12"
        ],
        "completion": "\ndef sum_even_and_even_index(nums):\n    return sum(nums[i] for i in range(len(nums)) if i % 2 == 0 and nums[i] % 2 == 0)\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 271,
        "prompt": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "code": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
        "test_imports": [],
        "test_list": [
            "assert even_Power_Sum(2) == 1056",
            "assert even_Power_Sum(3) == 8832",
            "assert even_Power_Sum(1) == 32"
        ],
        "completion": "\ndef even_Power_Sum(n):\n    # Write your code here\n    even_numbers = [i for i in range(2, n * 2 + 1, 2)]  # Get the first n even natural numbers\n    powered_numbers = [num ** 5 for num in even_numbers]  # Raise each even number to the fifth power\n    return sum(powered_numbers)  # Return the sum of the powered even numbers\n\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 272,
        "prompt": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
        "code": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ",
        "test_imports": [],
        "test_list": [
            "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
            "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
            "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
        ],
        "completion": "\ndef rear_extract(lst):\n    return [t[-1] for t in lst]\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 273,
        "prompt": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "code": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ",
        "test_imports": [],
        "test_list": [
            "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
            "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
            "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
        ],
        "completion": "\ndef substract_elements(tuple1, tuple2):\n    result = tuple(x - y for x, y in zip(tuple1, tuple2))\n    return result\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 274,
        "prompt": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "code": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
        "test_imports": [],
        "test_list": [
            "assert even_binomial_Coeff_Sum(4) == 8",
            "assert even_binomial_Coeff_Sum(6) == 32",
            "assert even_binomial_Coeff_Sum(2) == 2"
        ],
        "completion": "\ndef even_binomial_Coeff_Sum(n):\n    def binomial_coeff(n, k):\n        if k < 0 or k > n:\n            return 0\n        if k == 0 or k == n:\n            return 1\n        res = 1\n        for i in range(min(k, n - k)):\n            res = res * (n - i) // (i + 1)\n        return res\n\n    result = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            result += binomial_coeff(n, i)\n    return result\n\n# Tests\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 276,
        "prompt": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
        "code": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume",
        "test_imports": [
            "import math"
        ],
        "test_list": [
            "assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)",
            "assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)",
            "assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)"
        ],
        "completion": "\ndef volume_cylinder(radius, height):\n    import math\n    volume = math.pi * radius ** 2 * height\n    return volume\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 277,
        "prompt": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
        "code": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result",
        "test_imports": [],
        "test_list": [
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
        ],
        "completion": "\ndef dict_filter(dictionary, n):\n    return {k: v for k, v in dictionary.items() if v >= n}\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 278,
        "prompt": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
        "code": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ",
        "test_imports": [],
        "test_list": [
            "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
            "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
            "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
        ],
        "completion": "\ndef count_first_elements(tup):\n    count = 0\n    for item in tup:\n        if isinstance(item, tuple):\n            return count\n        else:\n            count += 1\n    return count\n\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 279,
        "prompt": "Write a function to find the nth decagonal number.",
        "code": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ",
        "test_imports": [],
        "test_list": [
            "assert is_num_decagonal(3) == 27",
            "assert is_num_decagonal(7) == 175",
            "assert is_num_decagonal(10) == 370"
        ],
        "completion": "\ndef is_num_decagonal(n):\n    # write your function here\n\n    return # return the nth decagonal number\n\n\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 280,
        "prompt": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "code": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos",
        "test_imports": [],
        "test_list": [
            "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
            "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
            "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
        ],
        "completion": "\ndef sequential_search(arr, elem):\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.",
        "code": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True",
        "test_imports": [],
        "test_list": [
            "assert all_unique([1,2,3]) == True",
            "assert all_unique([1,2,1,2]) == False",
            "assert all_unique([1,2,3,4,5]) == True"
        ],
        "completion": "\ndef all_unique(arr):\n    return len(arr) == len(set(arr))\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 282,
        "prompt": "Write a function to subtract two lists element-wise.",
        "code": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)",
        "test_imports": [],
        "test_list": [
            "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
            "assert sub_list([1,2],[3,4])==[-2,-2]",
            "assert sub_list([90,120],[50,70])==[40,50]"
        ],
        "completion": "\ndef sub_list(list1, list2):\n    return [x - y for x, y in zip(list1, list2)]\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 283,
        "prompt": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "code": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
        "test_imports": [],
        "test_list": [
            "assert validate(1234) == True",
            "assert validate(51241) == False",
            "assert validate(321) == True"
        ],
        "completion": "\ndef validate(num):\n    num_str = str(num)\n    for digit in num_str:\n        if int(digit) < num_str.count(digit):\n            return False\n    return True\n\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 284,
        "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "code": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element",
        "test_imports": [],
        "test_list": [
            "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
            "assert check_element([1,2,3,4],7)==False",
            "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
        ],
        "completion": "\ndef check_element(lst, element):\n    result = all(item == element for item in lst)\n    return result\n\nassert check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue')==False\nassert check_element([1,2,3,4], 7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"], 'green')==True\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 285,
        "prompt": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "code": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "test_imports": [],
        "test_list": [
            "assert text_match_two_three(\"ac\")==(False)",
            "assert text_match_two_three(\"dc\")==(False)",
            "assert text_match_two_three(\"abbbba\")==(True)"
        ],
        "completion": "\ndef text_match_two_three(s):\n    import re\n    return bool(re.search(r'ab{2,3}', s))\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 286,
        "prompt": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "code": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far",
        "test_imports": [],
        "test_list": [
            "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
            "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
            "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
        ],
        "completion": "\ndef max_sub_array_sum_repeated(arr, k, n):\n    modified_arr = arr * k\n    max_sum = modified_arr[0]\n    current_sum = modified_arr[0]\n    for i in range(1, n * len(arr)):\n        current_sum = max(modified_arr[i], current_sum + modified_arr[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 287,
        "prompt": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "code": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
        "test_imports": [],
        "test_list": [
            "assert square_Sum(2) == 20",
            "assert square_Sum(3) == 56",
            "assert square_Sum(4) == 120"
        ],
        "completion": "\ndef square_Sum(n):\n    sum_of_squares = sum([(2*i)**2 for i in range(1, n+1)])\n    return sum_of_squares\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 290,
        "prompt": "Write a function to find the list of maximum length in a list of lists.",
        "code": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)",
        "test_imports": [],
        "test_list": [
            "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
            "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
        ],
        "completion": "\ndef max_length(list_of_lists):\n    max_len = max(len(lst) for lst in list_of_lists)\n    max_list = next(lst for lst in list_of_lists if len(lst) == max_len)\n    return max_len, max_list\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]",
        "test_imports": [],
        "test_list": [
            "assert count_no_of_ways(2, 4) == 16",
            "assert count_no_of_ways(3, 2) == 6",
            "assert count_no_of_ways(4, 4) == 228"
        ],
        "completion": "\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    same_color_count = k\n    diff_color_count = k * (k - 1)\n    for i in range(3, n + 1):\n        total = (same_color_count + diff_color_count) * (k - 1)\n        same_color_count = diff_color_count\n        diff_color_count = total\n    return same_color_count + diff_color_count\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 292,
        "prompt": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
        "code": "def find(n,m):  \n    q = n//m \n    return (q)",
        "test_imports": [],
        "test_list": [
            "assert find(10,3) == 3",
            "assert find(4,2) == 2",
            "assert find(20,5) == 4"
        ],
        "completion": "\ndef find(a, b):\n    return a // b\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.",
        "code": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s",
        "test_imports": [],
        "test_list": [
            "assert otherside_rightangle(7,8)==10.63014581273465",
            "assert otherside_rightangle(3,4)==5",
            "assert otherside_rightangle(7,15)==16.55294535724685"
        ],
        "completion": "\ndef otherside_rightangle(side1, side2):\n    # write your function implementation here\n\nassert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.",
        "code": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)",
        "test_imports": [],
        "test_list": [
            "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
            "assert max_val(['Python', 15, 20, 25])==25",
            "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
        ],
        "completion": "\n# Task: Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(arr):\n    # Write your code here\n    pass\n\n# Tests\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5\nassert max_val(['Python', 15, 20, 25]) == 25\nassert max_val(['Python', 30, 20, 40, 50, 'version']) == 50\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.",
        "code": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)",
        "test_imports": [],
        "test_list": [
            "assert sum_div(8)==7",
            "assert sum_div(12)==16",
            "assert sum_div(7)==1"
        ],
        "completion": "\ndef sum_div(n):\n    # Write your code here\n    pass\n\nassert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 296,
        "prompt": "Write a python function to count inversions in an array.",
        "code": "def get_Inv_Count(arr): \n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ",
        "test_imports": [],
        "test_list": [
            "assert get_Inv_Count([1,20,6,4,5]) == 5",
            "assert get_Inv_Count([1,2,1]) == 1",
            "assert get_Inv_Count([1,2,5,6,1]) == 3"
        ],
        "completion": "\nassert get_Inv_Count([1,20,6,4,5]) == 5\nassert get_Inv_Count([1,2,1]) == 1\nassert get_Inv_Count([1,2,5,6,1]) == 3\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 297,
        "prompt": "Write a function to flatten a given nested list structure.",
        "code": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ",
        "test_imports": [],
        "test_list": [
            "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
            "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
            "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
        ],
        "completion": "\ndef flatten_list(nested_list):\n    flattened = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "code": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])",
        "test_imports": [],
        "test_list": [
            "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
            "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
            "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
        ],
        "completion": "\n# Task: Write a function to calculate the maximum aggregate from the list of tuples.\n\ndef max_aggregate(data):\n    # Write your code here\n    pass\n\n# Test cases\n\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "code": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ",
        "test_imports": [
            "import math"
        ],
        "test_list": [
            "assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)",
            "assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)",
            "assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"
        ],
        "completion": "\ndef count_binary_seq(n):\n    return 2**(2*n-1)\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 301,
        "prompt": "Write a function to find the depth of a dictionary.",
        "code": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
        "test_imports": [],
        "test_list": [
            "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
            "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
            "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
        ],
        "completion": "\ndef dict_depth(d, depth=1):\n    if not isinstance(d, dict) or not d:\n        return depth\n    return max(dict_depth(v, depth+1) for v in d.values())\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.",
        "code": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ",
        "test_imports": [],
        "test_list": [
            "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
            "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
            "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
        ],
        "completion": "\ndef find_Element(arr, rotations, test_index, test_case):\n    # Your code here\n    pass\n\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 305,
        "prompt": "Write a function to return two words from a list of words starting with letter 'p'.",
        "code": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
        "test_imports": [],
        "test_list": [
            "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
            "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
            "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
        ],
        "completion": "\ndef start_withp(words):\n    result = ()\n    for word in words:\n        for w in word.split():\n            if w.startswith('P') or w.startswith('p'):\n                result += (w,)\n                if len(result) == 2:\n                    return result\n    return result\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
        "code": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]",
        "test_imports": [],
        "test_list": [
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
            "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
        ],
        "completion": "\ndef max_sum_increasing_subseq(nums, n, i, k):\n    dp = [0] * n\n    dp[i] = nums[i]\n    \n    for j in range(i+1, k+1):\n        for m in range(i, j):\n            if nums[j] > nums[m]:\n                dp[j] = max(dp[j], dp[m] + nums[j])\n    \n    return max(dp)\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 307,
        "prompt": "Write a function to get a colon of a tuple.",
        "code": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon",
        "test_imports": [],
        "test_list": [
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
        ],
        "completion": "\ndef colon_tuplex(tup, position, value):\n    new_list = list(tup)\n    new_list[position] = value\n    return tuple(new_list)\n\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "code": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result",
        "test_imports": [],
        "test_list": [
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
        ],
        "completion": "\ndef large_product(lst1, lst2, num):\n    products = [x * y for x in lst1 for y in lst2]\n    largest_products = sorted(products, reverse=True)[:num]\n    return largest_products\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 309,
        "prompt": "Write a python function to find the maximum of two numbers.",
        "code": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ",
        "test_imports": [],
        "test_list": [
            "assert maximum(5,10) == 10",
            "assert maximum(-1,-2) == -1",
            "assert maximum(9,7) == 9"
        ],
        "completion": "\ndef maximum(a, b):\n    return a if a > b else b\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 310,
        "prompt": "Write a function to convert a given string to a tuple of characters.",
        "code": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
        "test_imports": [],
        "test_list": [
            "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
            "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
            "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
        ],
        "completion": "\n# Function to convert a given string to a tuple of characters\ndef string_to_tuple(input_string):\n    # Write your code here\n    pass\n\n# Test cases\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 311,
        "prompt": "Write a python function to set the left most unset bit.",
        "code": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ",
        "test_imports": [],
        "test_list": [
            "assert set_left_most_unset_bit(10) == 14",
            "assert set_left_most_unset_bit(12) == 14",
            "assert set_left_most_unset_bit(15) == 15"
        ],
        "completion": "\ndef set_left_most_unset_bit(num):\n    if num == 0:\n        return 1\n    temp = num\n    temp |= temp >> 1\n    temp |= temp >> 2\n    temp |= temp >> 4\n    temp |= temp >> 8\n    temp |= temp >> 16\n    return (temp + 1) & ~num\n"
    },
    {
        "source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb",
        "task_id": 312,
        "prompt": "Write a function to find the volume of a cone.",
        "code": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume",
        "test_imports": [
            "import math"
        ],
        "test_list": [
            "assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)",
            "assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)",
            "assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)"
        ],
        "completion": "\ndef volume_cone(radius, height):\n    import math\n    volume = (1/3) * math.pi * (radius ** 2) * height\n    return volume\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "code": "def highest_Power_of_2(n): \n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i \n            break \n    return res ",
        "test_imports": [],
        "test_list": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "completion": "\ndef highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 389,
        "prompt": "Write a function to find the n'th lucas number.",
        "code": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
        "test_imports": [],
        "test_list": [
            "assert find_lucas(9) == 76",
            "assert find_lucas(4) == 7",
            "assert find_lucas(3) == 4"
        ],
        "completion": "\n# Defining a function to find the n'th lucas number.\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n# Test cases\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 390,
        "prompt": "Write a function to apply a given format string to all of the elements in a list.",
        "code": "def add_string(list_, string):\n add_string=[string.format(i) for i in  list_]\n return add_string",
        "test_imports": [],
        "test_list": [
            "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
            "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
            "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
        ],
        "completion": "\ndef add_string(lst, format_str):\n    return [format_str.format(x) for x in lst]\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.",
        "code": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result",
        "test_imports": [],
        "test_list": [
            "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
            "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
            "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
        ],
        "completion": "\ndef convert_list_dictionary(keys, values1, values2):\n    result = []\n    for key, value1, value2 in zip(keys, values1, values2):\n        result.append({key: {value1: value2}})\n    return result\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
        "test_imports": [],
        "test_list": [
            "assert get_max_sum(60) == 106",
            "assert get_max_sum(10) == 12",
            "assert get_max_sum(2) == 2"
        ],
        "completion": "\ndef get_max_sum(n):\n    # Write your code here\n    pass\n\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 393,
        "prompt": "Write a function to find the list with maximum length.",
        "code": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)",
        "test_imports": [],
        "test_list": [
            "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
            "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
        ],
        "completion": "\ndef max_length_list(lst):\n    max_length = 0\n    max_list = []\n    for l in lst:\n        if len(l) > max_length:\n            max_length = len(l)\n            max_list = l\n    return (max_length, max_list)\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 394,
        "prompt": "Write a function to check if given tuple contains no duplicates.",
        "code": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return res ",
        "test_imports": [],
        "test_list": [
            "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
            "assert check_distinct((1, 4, 5, 6)) == True",
            "assert check_distinct((2, 3, 4, 5, 6)) == True"
        ],
        "completion": "\ndef check_distinct(data):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n    \n    Args:\n    data (tuple): The input tuple\n    \n    Returns:\n    bool: True if the tuple contains no duplicates, False otherwise\n    \"\"\"\n    # Your code here\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.",
        "code": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
        "test_imports": [],
        "test_list": [
            "assert first_non_repeating_character(\"abcabc\") == None",
            "assert first_non_repeating_character(\"abc\") == \"a\"",
            "assert first_non_repeating_character(\"ababc\") == \"c\""
        ],
        "completion": "\ndef first_non_repeating_character(string):\n    # Write your code here\n    pass\n  \n# Test cases\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not.",
        "code": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
        "test_imports": [],
        "test_list": [
            "assert check_char(\"abba\") == \"Valid\"",
            "assert check_char(\"a\") == \"Valid\"",
            "assert check_char(\"abcd\") == \"Invalid\""
        ],
        "completion": "\n# Few-shot prompt\ndef check_char(s: str) -> str:\n    \"\"\"\n    Check whether the given string starts and ends with the same character or not.\n\n    Args:\n    - s: Input string\n\n    Returns:\n    - \"Valid\" if the string starts and ends with the same character, \"Invalid\" otherwise\n    \"\"\"\n    # Your code here\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 397,
        "prompt": "Write a function to find the median of three numbers.",
        "code": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median",
        "test_imports": [],
        "test_list": [
            "assert median_numbers(25,55,65)==55.0",
            "assert median_numbers(20,10,30)==20.0",
            "assert median_numbers(15,45,75)==45.0"
        ],
        "completion": "\ndef median_numbers(num1, num2, num3):\n    # Write your code here\n    pass\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.",
        "code": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
        "test_imports": [],
        "test_list": [
            "assert sum_of_digits([10,2,56])==14",
            "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
            "assert sum_of_digits([10,20,-4,5,-70])==19"
        ],
        "completion": "\ndef sum_of_digits(nums):\n    result = []\n    for num in nums:\n        if isinstance(num, int):\n            result.append(sum(int(digit) for digit in str(abs(num))))\n        elif isinstance(num, list):\n            result.extend([sum(int(digit) for digit in str(abs(n))) for n in num if isinstance(n, int)])\n    return sum(result)\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "code": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test_imports": [],
        "test_list": [
            "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
            "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
            "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
        ],
        "completion": "\ndef bitwise_xor(tuple1, tuple2):\n    return tuple(x ^ y for x, y in zip(tuple1, tuple2))\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 400,
        "prompt": "Write a function to extract the number of unique tuples in the given list.",
        "code": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)",
        "test_imports": [],
        "test_list": [
            "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
            "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
            "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
        ],
        "completion": "\ndef extract_freq(lst):\n    unique_tuples = set(lst)\n    return len(unique_tuples)\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "code": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test_imports": [],
        "test_list": [
            "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
            "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
            "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
        ],
        "completion": "\ndef add_nested_tuples(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        added_tuple = (tuple1[i][0] + tuple2[i][0], tuple1[i][1] + tuple2[i][1])\n        result.append(added_tuple)\n    return tuple(result)\n\n\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 404,
        "prompt": "Write a python function to find the minimum of two numbers.",
        "code": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
        "test_imports": [],
        "test_list": [
            "assert minimum(1,2) == 1",
            "assert minimum(-5,-4) == -5",
            "assert minimum(0,0) == 0"
        ],
        "completion": "\ndef minimum(num1, num2):\n    \"\"\"\n    Find the minimum of two numbers.\n\n    Args:\n    num1 (int): First number\n    num2 (int): Second number\n\n    Returns:\n    int: The minimum of the two numbers\n    \"\"\"\n    return min(num1, num2)\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.",
        "code": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False",
        "test_imports": [],
        "test_list": [
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
        ],
        "completion": "\ndef check_tuplex(tup, element):\n    return element in tup\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 406,
        "prompt": "Write a python function to find whether the parity of a given number is odd.",
        "code": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False",
        "test_imports": [],
        "test_list": [
            "assert find_Parity(12) == False",
            "assert find_Parity(7) == True",
            "assert find_Parity(10) == False"
        ],
        "completion": "\ndef find_Parity(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
        "test_imports": [],
        "test_list": [
            "assert rearrange_bigger(12)==21",
            "assert rearrange_bigger(10)==False",
            "assert rearrange_bigger(102)==120"
        ],
        "completion": "\ndef rearrange_bigger(num):\n    num_str = str(num)\n    digits = [int(d) for d in num_str]\n\n    for i in range(len(digits) - 2, -1, -1):\n        if digits[i] < digits[i+1]:\n            # Find the smallest digit to the right that is larger than digits[i]\n            for j in range(len(digits) - 1, i, -1):\n                if digits[j] > digits[i]:\n                    # Swap digits[i] and digits[j]\n                    digits[i], digits[j] = digits[j], digits[i]\n                    # Reverse the digits to the right of i\n                    digits[i+1:] = reversed(digits[i+1:])\n                    result = int(''.join(map(str, digits)))\n                    return result\n    \n    return False\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 408,
        "prompt": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
        "code": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs",
        "test_imports": [],
        "test_list": [
            "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
        ],
        "completion": "\ndef k_smallest_pairs(nums1, nums2, k):\n    result = []\n    if not nums1 or not nums2:\n        return result\n    min_heap = []\n    for i in range(min(len(nums1), k)):\n        for j in range(min(len(nums2), k)):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i], nums2[j]))\n            else:\n                if nums1[i] + nums2[j] < min_heap[0][0] + min_heap[0][1]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (nums1[i], nums2[j]))\n                else:\n                    break\n    for _ in range(min(k, len(min_heap))):\n        result.append(heapq.heappop(min_heap))\n    return result\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "code": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min",
        "test_imports": [],
        "test_list": [
            "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
            "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
            "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
        ],
        "completion": "\ndef min_product_tuple(tuples):\n    minimum_product = float('inf')\n    for pair in tuples:\n        product = pair[0] * pair[1]\n        if product < minimum_product:\n            minimum_product = product\n    return minimum_product\n\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8\nassert min_product_tuple([(10, 20), (15, 2), (5, 10)]) == 30\nassert min_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)]) == 100\n"
    },
    {
        "source_file": "Benchmark Questions Verification V2.ipynb",
        "task_id": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
        "code": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
        "test_imports": [],
        "test_list": [
            "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
            "assert min_val(['Python', 15, 20, 25])==15",
            "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
        ],
        "completion": "\n# Task: Write a function to find the minimum value in a given heterogeneous list.\n\ndef min_val(input_list):\n    \"\"\"\n    Function to find the minimum value in a given heterogeneous list.\n    \n    Args:\n    - input_list: A heterogeneous list containing elements of various types\n    \n    Returns:\n    - The minimum numeric value from the list\n    \"\"\"\n    # Write your code here\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string.",
        "code": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "test_imports": [],
        "test_list": [
            "assert snake_to_camel('android_tv') == 'AndroidTv'",
            "assert snake_to_camel('google_pixel') == 'GooglePixel'",
            "assert snake_to_camel('apple_watch') == 'AppleWatch'"
        ],
        "completion": "\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.",
        "code": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
        "test_imports": [],
        "test_list": [
            "assert remove_odd([1,2,3]) == [2]",
            "assert remove_odd([2,4,6]) == [2,4,6]",
            "assert remove_odd([10,20,3]) == [10,20]"
        ],
        "completion": "\ndef remove_odd(arr):\n    # Write your code here\n    pass\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.",
        "code": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result",
        "test_imports": [],
        "test_list": [
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
        ],
        "completion": "\ndef extract_nth_element(tuples_list, n):\n    return [item[n] for item in tuples_list]\n\n# Test cases\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2) == [99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1) == [98, 97, 91, 94]\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 414,
        "prompt": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
        "code": "def overlapping(list1,list2):  \n    for i in range(len(list1)): \n        for j in range(len(list2)): \n            if(list1[i]==list2[j]): \n                return True\n    return False",
        "test_imports": [],
        "test_list": [
            "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
            "assert overlapping([1,2,3],[4,5,6]) == False",
            "assert overlapping([1,4,5],[1,4,5]) == True"
        ],
        "completion": "\ndef overlapping(seq1, seq2):\n    for value in seq1:\n        if value in seq2:\n            return True\n    return False\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
        "code": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
        "test_imports": [],
        "test_list": [
            "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
            "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
            "assert max_Product([1,2,3]) == (2,3)"
        ],
        "completion": "\ndef max_Product(arr):\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n\n    for num in arr:\n        if num >= max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n        if num <= min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    return (max1, max2) if abs(max1*max2) > abs(min1*min2) else (min1, min2)\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 417,
        "prompt": "Write a function to find common first element in given list of tuple.",
        "code": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ",
        "test_imports": [],
        "test_list": [
            "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
            "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
            "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
        ],
        "completion": "\ndef group_tuples(tuples_list):\n    common_first_element = {}\n    for tup in tuples_list:\n        if tup[0] in common_first_element:\n            common_first_element[tup[0]].append(tup[1])\n        else:\n            common_first_element[tup[0]] = [tup[1]]\n    result = [(k,) + tuple(v) for k, v in common_first_element.items()]\n    return result\n\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 418,
        "prompt": "Write a python function to find the element of a list having maximum length.",
        "code": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
        "test_imports": [],
        "test_list": [
            "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
            "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
            "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
        ],
        "completion": "\ndef Find_Max(lst):\n    # Write your code here\n    pass\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "code": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
        "test_imports": [],
        "test_list": [
            "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
            "assert round_and_sum([5,2,9,24.3,29])==345",
            "assert round_and_sum([25.0,56.7,89.2])==513"
        ],
        "completion": "\ndef round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
        "code": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
        "test_imports": [],
        "test_list": [
            "assert cube_Sum(2) == 72",
            "assert cube_Sum(3) == 288",
            "assert cube_Sum(4) == 800"
        ],
        "completion": "\ndef cube_Sum(n):\n    even_numbers = [i*2 for i in range(1, n+1)]\n    cube_sum = sum([num**3 for num in even_numbers])\n    return cube_sum\n\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
        "code": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
        "test_imports": [],
        "test_list": [
            "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
            "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
            "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
        ],
        "completion": "\ndef concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(str(element) for element in tup)\n\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\")) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\")) == 'ZEN-is-4-OP'\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
        "code": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ",
        "test_imports": [],
        "test_list": [
            "assert find_Average_Of_Cube(2) == 4.5",
            "assert find_Average_Of_Cube(3) == 12",
            "assert find_Average_Of_Cube(1) == 1"
        ],
        "completion": "\ndef find_Average_Of_Cube(n):\n    # Write your code here\n    pass\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
        "code": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ",
        "test_imports": [],
        "test_list": [
            "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
            "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
            "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
        ],
        "completion": "\n# Given a tuple of strings, extract only the rear index element of each string.\n# Write a function to achieve this and pass the provided test cases.\n\ndef extract_rear(strings):\n    rear_chars = [string[-1] for string in strings]\n    return rear_chars\n\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.",
        "code": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr",
        "test_imports": [],
        "test_list": [
            "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
        ],
        "completion": "\ndef count_element_in_list(lst, element):\n    count = 0\n    for sub_lst in lst:\n        if element in sub_lst:\n            count += 1\n    return count\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 426,
        "prompt": "Write a function to filter odd numbers.",
        "code": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
        "test_imports": [],
        "test_list": [
            "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
            "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
            "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
        ],
        "completion": "\ndef filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "code": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "test_imports": [],
        "test_list": [
            "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
            "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
            "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
        ],
        "completion": "\n# Task: Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\ndef change_date_format(date_string):\n    # Write your code here\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 428,
        "prompt": "Write a function to sort the given array by using shell sort.",
        "code": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list",
        "test_imports": [],
        "test_list": [
            "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
            "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
            "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
        ],
        "completion": "\ndef shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "code": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test_imports": [],
        "test_list": [
            "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
            "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
            "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
        ],
        "completion": "\ndef and_tuples(tuple1, tuple2):\n    result_tuple = tuple(t1 & t2 for t1, t2 in zip(tuple1, tuple2))\n    return result_tuple\n\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 430,
        "prompt": "Write a function to find the directrix of a parabola.",
        "code": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix",
        "test_imports": [],
        "test_list": [
            "assert parabola_directrix(5,3,2)==-198",
            "assert parabola_directrix(9,8,4)==-2336",
            "assert parabola_directrix(2,4,6)==-130"
        ],
        "completion": "\n# Define a function to find the directrix of a parabola\ndef parabola_directrix(a, b, c):\n    directrix = -4 * a * c / (4 * a)\n    return directrix\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
        "code": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result",
        "test_imports": [],
        "test_list": [
            "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
            "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
            "assert common_element(['a','b','c'], ['d','b','e'])==True"
        ],
        "completion": "\ndef common_element(list1, list2):\n    if any(element in list2 for element in list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 432,
        "prompt": "Write a function to find the median length of a trapezium.",
        "code": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median",
        "test_imports": [],
        "test_list": [
            "assert median_trapezium(15,25,35)==20",
            "assert median_trapezium(10,20,30)==15",
            "assert median_trapezium(6,9,4)==7.5"
        ],
        "completion": "\ndef median_trapezium(a, b, h):\n    return (a + b) / 2\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code": "def check_greater(arr, number):\n  arr.sort()\n  return number > arr[-1]",
        "test_imports": [],
        "test_list": [
            "assert check_greater([1, 2, 3, 4, 5], 4) == False",
            "assert check_greater([2, 3, 4, 5, 6], 8) == True",
            "assert check_greater([9, 7, 4, 8, 6, 1], 11) == True"
        ],
        "completion": "\ndef check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return True\n    return False\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
        "code": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n",
        "test_imports": [],
        "test_list": [
            "assert text_match_one(\"ac\")==False",
            "assert text_match_one(\"dc\")==False",
            "assert text_match_one(\"abba\")==True"
        ],
        "completion": "\n# Few-shot prompt\ndef text_match_one(s):\n    import re\n    pattern = 'ab+'\n    return bool(re.search(pattern, s))\n\n# Test cases\nassert text_match_one(\"ac\")==False\nassert text_match_one(\"dc\")==False\nassert text_match_one(\"abba\")==True\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 435,
        "prompt": "Write a python function to find the last digit of a given number.",
        "code": "def last_Digit(n) :\n    return (n % 10) ",
        "test_imports": [],
        "test_list": [
            "assert last_Digit(123) == 3",
            "assert last_Digit(25) == 5",
            "assert last_Digit(30) == 0"
        ],
        "completion": "\ndef last_Digit(number):\n    return number % 10\n\nassert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 436,
        "prompt": "Write a python function to return the negative numbers in a list.",
        "code": "def neg_nos(list1):\n  out = []\n  for num in list1: \n    if num < 0: \n      out.append(num)\n  return out ",
        "test_imports": [],
        "test_list": [
            "assert neg_nos([-1,4,5,-6]) == [-1,-6]",
            "assert neg_nos([-1,-2,3,4]) == [-1,-2]",
            "assert neg_nos([-7,-6,8,9]) == [-7,-6]"
        ],
        "completion": "\ndef neg_nos(nums):\n    # Write your code here\n    pass\n\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\nassert neg_nos([-1,-2,3,4]) == [-1,-2]\nassert neg_nos([-7,-6,8,9]) == [-7,-6]\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 437,
        "prompt": "Write a function to remove odd characters in a string.",
        "code": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2",
        "test_imports": [],
        "test_list": [
            "assert remove_odd(\"python\")==(\"yhn\")",
            "assert remove_odd(\"program\")==(\"rga\")",
            "assert remove_odd(\"language\")==(\"agae\")"
        ],
        "completion": "\ndef remove_odd(s):\n    return s[1::2]\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.",
        "code": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return res",
        "test_imports": [],
        "test_list": [
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3",
            "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2",
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4"
        ],
        "completion": "\ndef count_bidirectional(pairs):\n    count = 0\n    for pair in pairs:\n        reverse_pair = (pair[1], pair[0])\n        if reverse_pair in pairs:\n            count += 1\n    return count\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 439,
        "prompt": "Write a function to join a list of multiple integers into a single integer.",
        "code": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x",
        "test_imports": [],
        "test_list": [
            "assert multiple_to_single([11, 33, 50])==113350",
            "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
            "assert multiple_to_single([10,15,20,25])==10152025"
        ],
        "completion": "\ndef multiple_to_single(lst):\n    # Write your code here\n    pass\n\nassert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 440,
        "prompt": "Write a function to find the first adverb and their positions in a given sentence.",
        "code": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))",
        "test_imports": [],
        "test_list": [
            "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
            "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
            "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
        ],
        "completion": "\ndef find_adverb_position(sentence):\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if word.endswith(\"!!\"):\n            adverb = word.replace(\"!!\", \"\")\n            return (i, i + len(adverb) - 1, adverb)\n\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 441,
        "prompt": "Write a function to find the surface area of a cube of a given size.",
        "code": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea",
        "test_imports": [],
        "test_list": [
            "assert surfacearea_cube(5)==150",
            "assert surfacearea_cube(3)==54",
            "assert surfacearea_cube(10)==600"
        ],
        "completion": "\ndef surfacearea_cube(size):\n    return 6 * size ** 2\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.",
        "code": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)",
        "test_imports": [],
        "test_list": [
            "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
            "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
            "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
        ],
        "completion": "\n# Task: Write a function to find the ratio of positive numbers in an array of integers.\n\ndef positive_count(arr):\n    # Your code here\n\n# Tests\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.",
        "code": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
        "test_imports": [],
        "test_list": [
            "assert largest_neg([1,2,3,-4,-6]) == -6",
            "assert largest_neg([1,2,3,-8,-9]) == -9",
            "assert largest_neg([1,2,3,4,-1]) == -1"
        ],
        "completion": "\ndef largest_neg(lst):\n    negatives = [num for num in lst if num < 0]\n    if negatives:\n        return max(negatives)\n    else:\n        return None\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.",
        "code": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ",
        "test_imports": [],
        "test_list": [
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
            "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
        ],
        "completion": "\nWrite a function to trim each tuple by k in the given tuple list.\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "code": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "test_imports": [],
        "test_list": [
            "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
            "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
            "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
        ],
        "completion": "\ndef index_multiplication(tuple1, tuple2):\n    result = tuple((t1 * t2 for t1, t2 in zip(tup1, tup2)) for tup1, tup2 in zip(tuple1, tuple2))\n    return result\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
        "code": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ",
        "test_imports": [],
        "test_list": [
            "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
            "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
            "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
        ],
        "completion": "\ndef count_Occurrence(t, l):\n    count = 0\n    for item in t:\n        if item in l:\n            count += 1\n    return count\n\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 447,
        "prompt": "Write a function to find cubes of individual elements in a list.",
        "code": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
        "test_imports": [],
        "test_list": [
            "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
            "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
            "assert cube_nums([12,15])==([1728, 3375])"
        ],
        "completion": "\ndef cube_nums(nums):\n    return [num**3 for num in nums]\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.",
        "code": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum",
        "test_imports": [],
        "test_list": [
            "assert cal_sum(9) == 49",
            "assert cal_sum(10) == 66",
            "assert cal_sum(11) == 88"
        ],
        "completion": "\ndef cal_sum(n):\n    perrin_numbers = [3, 0, 2]\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return perrin_numbers[n - 1]\n    else:\n        sum_perrin = sum(perrin_numbers)\n        for i in range(3, n):\n            next_perrin = perrin_numbers[i - 3] + perrin_numbers[i - 2]\n            perrin_numbers.append(next_perrin)\n            sum_perrin += next_perrin\n        return sum_perrin\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 450,
        "prompt": "Write a function to extract specified size of strings from a given list of string values.",
        "code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
        "test_imports": [],
        "test_list": [
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
        ],
        "completion": "\ndef extract_string(strings, size):\n    return [s for s in strings if len(s) == size]\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 451,
        "prompt": "Write a function to remove all whitespaces from the given string.",
        "code": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))",
        "test_imports": [],
        "test_list": [
            "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
            "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
            "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
        ],
        "completion": "\ndef remove_whitespaces(input_string):\n    return input_string.replace(\" \", \"\")\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 452,
        "prompt": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "code": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return 0",
        "test_imports": [],
        "test_list": [
            "assert loss_amount(1500,1200)==0",
            "assert loss_amount(100,200)==100",
            "assert loss_amount(2000,5000)==3000"
        ],
        "completion": "\ndef loss_amount(cost_price, selling_price):\n    if selling_price < cost_price:\n        return cost_price - selling_price\n    else:\n        return 0\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.",
        "code": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res",
        "test_imports": [],
        "test_list": [
            "assert sumofFactors(18) == 26",
            "assert sumofFactors(30) == 48",
            "assert sumofFactors(6) == 8"
        ],
        "completion": "\ndef sumofFactors(number):\n    \"\"\"\n    Finds the sum of even factors of a number.\n\n    Args:\n    number (int): The input number\n\n    Returns:\n    int: The sum of even factors of the input number\n    \"\"\"\n    # Your code here\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 454,
        "prompt": "Write a function that matches a word containing 'z'.",
        "code": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False",
        "test_imports": [],
        "test_list": [
            "assert text_match_wordz(\"pythonz.\")==True",
            "assert text_match_wordz(\"xyz.\")==True",
            "assert text_match_wordz(\"  lang  .\")==False"
        ],
        "completion": "\n# Few-shot prompt\ndef text_match_wordz(s):\n    import re\n    return bool(re.search(r'\\bz\\w*\\b', s))\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False",
        "test_imports": [],
        "test_list": [
            "assert check_monthnumb_number(5)==True",
            "assert check_monthnumb_number(2)==False",
            "assert check_monthnumb_number(6)==False"
        ],
        "completion": "\n# Task:\nWrite a function called `check_monthnumb_number` that takes an integer `month_number` as input and returns `True` if the month contains 31 days and `False` otherwise.\n\nYour code should pass these tests:\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 456,
        "prompt": "Write a function to reverse each string in a given list of string values.",
        "code": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
        "test_imports": [],
        "test_list": [
            "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
            "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
            "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
        ],
        "completion": "\ndef reverse_string_list(str_list):\n    return [s[::-1] for s in str_list]\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 457,
        "prompt": "Write a python function to find the sublist having minimum length.",
        "code": "def Find_Min(lst): \n    return min(lst, key=len) ",
        "test_imports": [],
        "test_list": [
            "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
            "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
            "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
        ],
        "completion": "\ndef Find_Min(sublists):\n    return min(sublists, key=len)\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 458,
        "prompt": "Write a function to find the area of a rectangle.",
        "code": "def rectangle_area(l,b):\n  area=l*b\n  return area",
        "test_imports": [],
        "test_list": [
            "assert rectangle_area(10,20)==200",
            "assert rectangle_area(10,5)==50",
            "assert rectangle_area(4,2)==8"
        ],
        "completion": "\ndef rectangle_area(length, width):\n    return length * width\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string.",
        "code": "import re\ndef remove_uppercase(str1):\n  return re.sub('[A-Z]', '', str1)",
        "test_imports": [],
        "test_list": [
            "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
            "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
            "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
        ],
        "completion": "\ndef remove_uppercase(input_string):\n    return ''.join(char for char in input_string if not char.isupper())\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 460,
        "prompt": "Write a python function to get the first element of each sublist.",
        "code": "def Extract(lst): \n    return [item[0] for item in lst] ",
        "test_imports": [],
        "test_list": [
            "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
            "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
            "assert Extract([[9,8,1],[1,2]]) == [9,1]"
        ],
        "completion": "\ndef Extract(lst):\n    return [sublist[0] for sublist in lst]\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.",
        "code": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
        "test_imports": [],
        "test_list": [
            "assert upper_ctr('PYthon') == 1",
            "assert upper_ctr('BigData') == 1",
            "assert upper_ctr('program') == 0"
        ],
        "completion": "\ndef upper_ctr(s):\n    return sum(1 for char in s if char.isupper())\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.",
        "code": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result",
        "test_imports": [],
        "test_list": [
            "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
            "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
            "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
        ],
        "completion": "\ndef combinations_list(lst):\n    result = [[]]\n    for element in lst:\n        result += [prev + [element] for prev in result]\n    return result\n\n# Test cases\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['orange', 'red'], ['green'], ['orange', 'green'], ['red', 'green'], ['orange', 'red', 'green'], ['blue'], ['orange', 'blue'], ['red', 'blue'], ['orange', 'red', 'blue'], ['green', 'blue'], ['orange', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['red', 'green'], ['blue'], ['red', 'blue'], ['green', 'blue'], ['red', 'green', 'blue'], ['white'], ['red', 'white'], ['green', 'white'], ['red', 'green', 'white'], ['blue', 'white'], ['red', 'blue', 'white'], ['green', 'blue', 'white'], ['red', 'green', 'blue', 'white'], ['black'], ['red', 'black'], ['green', 'black'], ['red', 'green', 'black'], ['blue', 'black'], ['red', 'blue', 'black'], ['green', 'blue', 'black'], ['red', 'green', 'blue', 'black'], ['orange'], ['red', 'orange'], ['green', 'orange'], ['red', 'green', 'orange'], ['blue', 'orange'], ['red', 'blue', 'orange'], ['green', 'blue', 'orange'], ['red', 'green', 'blue', 'orange'], ['white', 'black'], ['red', 'white', 'black'], ['green', 'white', 'black'], ['red', 'green', 'white', 'black'], ['blue', 'white', 'black'], ['red', 'blue', 'white', 'black'], ['green', 'blue', 'white', 'black'], ['red', 'green', 'blue', 'white', 'black'], ['orange', 'black'], ['red', 'orange', 'black'], ['green', 'orange', 'black'], ['red', 'green', 'orange', 'black'], ['blue', 'orange', 'black'], ['red', 'blue', 'orange', 'black'], ['green', 'blue', 'orange', 'black'], ['red', 'green', 'blue', 'orange', 'black'], ['white', 'orange'], ['red', 'white', 'orange'], ['green', 'white', 'orange'], ['red', 'green', 'white', 'orange'], ['blue', 'white', 'orange'], ['red', 'blue', 'white', 'orange'], ['green', 'blue', 'white', 'orange'], ['red', 'green', 'blue', 'white', 'orange'], ['white', 'black', 'orange'], ['red', 'white', 'black', 'orange'], ['green', 'white', 'black', 'orange'], ['red', 'green', 'white', 'black', 'orange'], ['blue', 'white', 'black', 'orange'], ['red', 'blue', 'white', 'black', 'orange'], ['green', 'blue', 'white', 'black', 'orange'], ['red', 'green', 'blue', 'white', 'black', 'orange']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['red', 'green'], ['black'], ['red', 'black'], ['green', 'black'], ['red', 'green', 'black'], ['orange'], ['red', 'orange'], ['green', 'orange'], ['red', 'green', 'orange'], ['black', 'orange'], ['red', 'black', 'orange'], ['green', 'black', 'orange'], ['red', 'green', 'black', 'orange']]\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.",
        "code": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far",
        "test_imports": [],
        "test_list": [
            "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
            "assert max_subarray_product([6, -3, -10, 0, 2]) == 180",
            "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
        ],
        "completion": "\ndef max_subarray_product(nums):\n    if not nums:\n        return 0\n    \n    max_product = nums[0]\n    min_product = nums[0]\n    result = max_product\n    \n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n        \n        result = max(result, max_product)\n    \n    return result\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.",
        "code": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result",
        "test_imports": [],
        "test_list": [
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
        ],
        "completion": "\ndef check_value(dictionary, value):\n    return all(val == value for val in dictionary.values())\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.",
        "code": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1",
        "test_imports": [],
        "test_list": [
            "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
            "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
            "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
        ],
        "completion": "\ndef drop_empty(input_dict):\n    return {k: v for k, v in input_dict.items() if v is not None}\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code": "def max_product(arr):   \n  n = len(arr)\n  mpis = arr[:]\n  for i in range(n): \n    current_prod = arr[i]\n    j = i + 1\n    while j < n:\n      if arr[j-1] > arr[j]: \n        break\n      current_prod *= arr[j]\n      if current_prod > mpis[j]:\n        mpis[j] = current_prod \n      j = j + 1\n  return max(mpis)",
        "test_imports": [],
        "test_list": [
            "assert max_product([3, 100, 4, 5, 150, 6]) == 3000",
            "assert max_product([4, 42, 55, 68, 80]) == 50265600",
            "assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"
        ],
        "completion": "\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([4, 42, 55, 68, 80]) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 470,
        "prompt": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "code": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ",
        "test_imports": [],
        "test_list": [
            "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
            "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
            "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
        ],
        "completion": "\ndef add_pairwise(nums):\n    result = []\n    for i in range(len(nums)-1):\n        result.append(nums[i] + nums[i+1])\n    return tuple(result)\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 471,
        "prompt": "Write a python function to find the product of the array multiplication modulo n.",
        "code": "def find_remainder(arr, n): \n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ",
        "test_imports": [],
        "test_list": [
            "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9",
            "assert find_remainder([1,1,1],1) == 0",
            "assert find_remainder([1,2,1],2) == 0"
        ],
        "completion": "\ndef find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "code": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "test_imports": [],
        "test_list": [
            "assert check_Consecutive([1,2,3,4,5]) == True",
            "assert check_Consecutive([1,2,3,5,6]) == False",
            "assert check_Consecutive([1,2,1]) == False"
        ],
        "completion": "\n# Task: Write a python function to check whether the given list contains consecutive numbers or not.\n\ndef check_Consecutive(arr):\n    # Your code here\n    pass\n\n# Test cases\nassert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "code": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)",
        "test_imports": [],
        "test_list": [
            "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
            "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
            "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
        ],
        "completion": "\ndef tuple_intersection(list1, list2):\n    set1 = {tuple(sorted(t)) for t in list1}\n    set2 = {tuple(sorted(t)) for t in list2}\n    return set1.intersection(set2)\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 474,
        "prompt": "Write a function to replace characters in a string.",
        "code": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
        "test_imports": [],
        "test_list": [
            "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
            "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
            "assert replace_char(\"python\",'l','a')==(\"python\")"
        ],
        "completion": "\n# Task: Write a function to replace characters in a string.\n\ndef replace_char(input_str, char_to_replace, replacement_char):\n    # write your implementation here\n    return input_str.replace(char_to_replace, replacement_char)\n\n# Test cases\nassert replace_char(\"polygon\", 'y', 'l') == \"pollgon\"\nassert replace_char(\"character\", 'c', 'a') == \"aharaater\"\nassert replace_char(\"python\", 'l', 'a') == \"python\"\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 475,
        "prompt": "Write a function to sort a dictionary by value.",
        "code": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter",
        "test_imports": [],
        "test_list": [
            "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
            "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
            "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
        ],
        "completion": "\n# Task: Write a function to sort a dictionary by value.\n\ndef sort_counter(d):\n    sorted_items = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "code": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
        "test_imports": [],
        "test_list": [
            "assert big_sum([1,2,3]) == 4",
            "assert big_sum([-1,2,3,4]) == 3",
            "assert big_sum([2,3,6]) == 8"
        ],
        "completion": "\ndef big_sum(arr):\n    return min(arr) + max(arr)\n\n# Test cases\nassert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 477,
        "prompt": "Write a python function to convert the given string to lower case.",
        "code": "def is_lower(string):\n  return (string.lower())",
        "test_imports": [],
        "test_list": [
            "assert is_lower(\"InValid\") == \"invalid\"",
            "assert is_lower(\"TruE\") == \"true\"",
            "assert is_lower(\"SenTenCE\") == \"sentence\""
        ],
        "completion": "\ndef is_lower(string):\n    return string.lower()\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.",
        "code": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)",
        "test_imports": [],
        "test_list": [
            "assert remove_lowercase(\"PYTHon\")==('PYTH')",
            "assert remove_lowercase(\"FInD\")==('FID')",
            "assert remove_lowercase(\"STRinG\")==('STRG')"
        ],
        "completion": "\ndef remove_lowercase(input_string):\n    return ''.join([char for char in input_string if char.isupper()])\n"
    },
    {
        "source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb",
        "task_id": 479,
        "prompt": "Write a python function to find the first digit of a given number.",
        "code": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ",
        "test_imports": [],
        "test_list": [
            "assert first_Digit(123) == 1",
            "assert first_Digit(456) == 4",
            "assert first_Digit(12) == 1"
        ],
        "completion": "\ndef first_Digit(num):\n    \"\"\"\n    Returns the first digit of a given number.\n\n    Args:\n    num: int - The input number.\n\n    Returns:\n    int - The first digit of the given number.\n    \"\"\"\n    return int(str(num)[0])\n\n\nassert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1\n"
    }
]